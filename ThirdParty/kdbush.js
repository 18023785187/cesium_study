function sortKD(t,s,o,n,e,h){if(e-n<=o)return;const r=n+e>>1;select(t,s,r,n,e,h%2),sortKD(t,s,o,n,r-1,h+1),sortKD(t,s,o,r+1,e,h+1)}function select(t,s,o,n,e,h){for(;e>n;){if(e-n>600){const r=e-n+1,i=o-n+1,p=Math.log(r),u=.5*Math.exp(2*p/3),a=.5*Math.sqrt(p*u*(r-u)/r)*(i-r/2<0?-1:1);select(t,s,o,Math.max(n,Math.floor(o-i*u/r+a)),Math.min(e,Math.floor(o+(r-i)*u/r+a)),h)}const r=s[2*o+h];let i=n,p=e;for(swapItem(t,s,n,o),s[2*e+h]>r&&swapItem(t,s,n,e);i<p;){for(swapItem(t,s,i,p),i++,p--;s[2*i+h]<r;)i++;for(;s[2*p+h]>r;)p--}s[2*n+h]===r?swapItem(t,s,n,p):(p++,swapItem(t,s,p,e)),p<=o&&(n=p+1),o<=p&&(e=p-1)}}function swapItem(t,s,o,n){swap(t,o,n),swap(s,2*o,2*n),swap(s,2*o+1,2*n+1)}function swap(t,s,o){const n=t[s];t[s]=t[o],t[o]=n}function range(t,s,o,n,e,h,r){const i=[0,t.length-1,0],p=[];let u,a;for(;i.length;){const c=i.pop(),f=i.pop(),l=i.pop();if(f-l<=r){for(let r=l;r<=f;r++)u=s[2*r],a=s[2*r+1],u>=o&&u<=e&&a>=n&&a<=h&&p.push(t[r]);continue}const w=Math.floor((l+f)/2);u=s[2*w],a=s[2*w+1],u>=o&&u<=e&&a>=n&&a<=h&&p.push(t[w]);const d=(c+1)%2;(0===c?o<=u:n<=a)&&(i.push(l),i.push(w-1),i.push(d)),(0===c?e>=u:h>=a)&&(i.push(w+1),i.push(f),i.push(d))}return p}function within(t,s,o,n,e,h){const r=[0,t.length-1,0],i=[],p=e*e;for(;r.length;){const u=r.pop(),a=r.pop(),c=r.pop();if(a-c<=h){for(let e=c;e<=a;e++)sqDist(s[2*e],s[2*e+1],o,n)<=p&&i.push(t[e]);continue}const f=Math.floor((c+a)/2),l=s[2*f],w=s[2*f+1];sqDist(l,w,o,n)<=p&&i.push(t[f]);const d=(u+1)%2;(0===u?o-e<=l:n-e<=w)&&(r.push(c),r.push(f-1),r.push(d)),(0===u?o+e>=l:n+e>=w)&&(r.push(f+1),r.push(a),r.push(d))}return i}function sqDist(t,s,o,n){const e=t-o,h=s-n;return e*e+h*h}const defaultGetX=t=>t[0],defaultGetY=t=>t[1];class KDBush{constructor(t,s=defaultGetX,o=defaultGetY,n=64,e=Float64Array){this.nodeSize=n,this.points=t;const h=t.length<65536?Uint16Array:Uint32Array,r=this.ids=new h(t.length),i=this.coords=new e(2*t.length);for(let n=0;n<t.length;n++)r[n]=n,i[2*n]=s(t[n]),i[2*n+1]=o(t[n]);sortKD(r,i,n,0,r.length-1,0)}range(t,s,o,n){return range(this.ids,this.coords,t,s,o,n,this.nodeSize)}within(t,s,o){return within(this.ids,this.coords,t,s,o,this.nodeSize)}}export{KDBush as default};