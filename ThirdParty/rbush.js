function quickselect(t,e,i,n,a){quickselectStep(t,e,i||0,n||t.length-1,a||defaultCompare)}function quickselectStep(t,e,i,n,a){for(;n>i;){if(n-i>600){var r=n-i+1,h=e-i+1,s=Math.log(r),o=.5*Math.exp(2*s/3),l=.5*Math.sqrt(s*o*(r-o)/r)*(h-r/2<0?-1:1);quickselectStep(t,e,Math.max(i,Math.floor(e-h*o/r+l)),Math.min(n,Math.floor(e+(r-h)*o/r+l)),a)}var c=t[e],m=i,x=n;for(swap(t,i,e),a(t[n],c)>0&&swap(t,i,n);m<x;){for(swap(t,m,x),m++,x--;a(t[m],c)<0;)m++;for(;a(t[x],c)>0;)x--}0===a(t[i],c)?swap(t,i,x):swap(t,++x,n),x<=e&&(i=x+1),e<=x&&(n=x-1)}}function swap(t,e,i){var n=t[e];t[e]=t[i],t[i]=n}function defaultCompare(t,e){return t<e?-1:t>e?1:0}class RBush{constructor(t=9){this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()}all(){return this._all(this.data,[])}search(t){let e=this.data;const i=[];if(!intersects(t,e))return i;const n=this.toBBox,a=[];for(;e;){for(let r=0;r<e.children.length;r++){const h=e.children[r],s=e.leaf?n(h):h;intersects(t,s)&&(e.leaf?i.push(h):contains(t,s)?this._all(h,i):a.push(h))}e=a.pop()}return i}collides(t){let e=this.data;if(!intersects(t,e))return!1;const i=[];for(;e;){for(let n=0;n<e.children.length;n++){const a=e.children[n],r=e.leaf?this.toBBox(a):a;if(intersects(t,r)){if(e.leaf||contains(t,r))return!0;i.push(a)}}e=i.pop()}return!1}load(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(let e=0;e<t.length;e++)this.insert(t[e]);return this}let e=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===e.height)this._splitRoot(this.data,e);else{if(this.data.height<e.height){const t=this.data;this.data=e,e=t}this._insert(e,this.data.height-e.height-1,!0)}else this.data=e;return this}insert(t){return t&&this._insert(t,this.data.height-1),this}clear(){return this.data=createNode([]),this}remove(t,e){if(!t)return this;let i=this.data;const n=this.toBBox(t),a=[],r=[];let h,s,o;for(;i||a.length;){if(i||(i=a.pop(),s=a[a.length-1],h=r.pop(),o=!0),i.leaf){const n=findItem(t,i.children,e);if(-1!==n)return i.children.splice(n,1),a.push(i),this._condense(a),this}o||i.leaf||!contains(i,n)?s?(h++,i=s.children[h],o=!1):i=null:(a.push(i),r.push(h),h=0,s=i,i=i.children[0])}return this}toBBox(t){return t}compareMinX(t,e){return t.minX-e.minX}compareMinY(t,e){return t.minY-e.minY}toJSON(){return this.data}fromJSON(t){return this.data=t,this}_all(t,e){const i=[];for(;t;)t.leaf?e.push(...t.children):i.push(...t.children),t=i.pop();return e}_build(t,e,i,n){const a=i-e+1;let r,h=this._maxEntries;if(a<=h)return r=createNode(t.slice(e,i+1)),calcBBox(r,this.toBBox),r;n||(n=Math.ceil(Math.log(a)/Math.log(h)),h=Math.ceil(a/Math.pow(h,n-1))),r=createNode([]),r.leaf=!1,r.height=n;const s=Math.ceil(a/h),o=s*Math.ceil(Math.sqrt(h));multiSelect(t,e,i,o,this.compareMinX);for(let a=e;a<=i;a+=o){const e=Math.min(a+o-1,i);multiSelect(t,a,e,s,this.compareMinY);for(let i=a;i<=e;i+=s){const a=Math.min(i+s-1,e);r.children.push(this._build(t,i,a,n-1))}}return calcBBox(r,this.toBBox),r}_chooseSubtree(t,e,i,n){for(;n.push(e),!e.leaf&&n.length-1!==i;){let i,n=1/0,a=1/0;for(let r=0;r<e.children.length;r++){const h=e.children[r],s=bboxArea(h),o=enlargedArea(t,h)-s;o<a?(a=o,n=s<n?s:n,i=h):o===a&&s<n&&(n=s,i=h)}e=i||e.children[0]}return e}_insert(t,e,i){const n=i?t:this.toBBox(t),a=[],r=this._chooseSubtree(n,this.data,e,a);for(r.children.push(t),extend(r,n);e>=0&&a[e].children.length>this._maxEntries;)this._split(a,e),e--;this._adjustParentBBoxes(n,a,e)}_split(t,e){const i=t[e],n=i.children.length,a=this._minEntries;this._chooseSplitAxis(i,a,n);const r=this._chooseSplitIndex(i,a,n),h=createNode(i.children.splice(r,i.children.length-r));h.height=i.height,h.leaf=i.leaf,calcBBox(i,this.toBBox),calcBBox(h,this.toBBox),e?t[e-1].children.push(h):this._splitRoot(i,h)}_splitRoot(t,e){this.data=createNode([t,e]),this.data.height=t.height+1,this.data.leaf=!1,calcBBox(this.data,this.toBBox)}_chooseSplitIndex(t,e,i){let n,a=1/0,r=1/0;for(let h=e;h<=i-e;h++){const e=distBBox(t,0,h,this.toBBox),s=distBBox(t,h,i,this.toBBox),o=intersectionArea(e,s),l=bboxArea(e)+bboxArea(s);o<a?(a=o,n=h,r=l<r?l:r):o===a&&l<r&&(r=l,n=h)}return n||i-e}_chooseSplitAxis(t,e,i){const n=t.leaf?this.compareMinX:compareNodeMinX,a=t.leaf?this.compareMinY:compareNodeMinY;this._allDistMargin(t,e,i,n)<this._allDistMargin(t,e,i,a)&&t.children.sort(n)}_allDistMargin(t,e,i,n){t.children.sort(n);const a=this.toBBox,r=distBBox(t,0,e,a),h=distBBox(t,i-e,i,a);let s=bboxMargin(r)+bboxMargin(h);for(let n=e;n<i-e;n++){const e=t.children[n];extend(r,t.leaf?a(e):e),s+=bboxMargin(r)}for(let n=i-e-1;n>=e;n--){const e=t.children[n];extend(h,t.leaf?a(e):e),s+=bboxMargin(h)}return s}_adjustParentBBoxes(t,e,i){for(let n=i;n>=0;n--)extend(e[n],t)}_condense(t){for(let e,i=t.length-1;i>=0;i--)0===t[i].children.length?i>0?(e=t[i-1].children,e.splice(e.indexOf(t[i]),1)):this.clear():calcBBox(t[i],this.toBBox)}}function findItem(t,e,i){if(!i)return e.indexOf(t);for(let n=0;n<e.length;n++)if(i(t,e[n]))return n;return-1}function calcBBox(t,e){distBBox(t,0,t.children.length,e,t)}function distBBox(t,e,i,n,a){a||(a=createNode(null)),a.minX=1/0,a.minY=1/0,a.maxX=-1/0,a.maxY=-1/0;for(let r=e;r<i;r++){const e=t.children[r];extend(a,t.leaf?n(e):e)}return a}function extend(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function compareNodeMinX(t,e){return t.minX-e.minX}function compareNodeMinY(t,e){return t.minY-e.minY}function bboxArea(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function bboxMargin(t){return t.maxX-t.minX+(t.maxY-t.minY)}function enlargedArea(t,e){return(Math.max(e.maxX,t.maxX)-Math.min(e.minX,t.minX))*(Math.max(e.maxY,t.maxY)-Math.min(e.minY,t.minY))}function intersectionArea(t,e){const i=Math.max(t.minX,e.minX),n=Math.max(t.minY,e.minY),a=Math.min(t.maxX,e.maxX),r=Math.min(t.maxY,e.maxY);return Math.max(0,a-i)*Math.max(0,r-n)}function contains(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function intersects(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function createNode(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function multiSelect(t,e,i,n,a){const r=[e,i];for(;r.length;){if((i=r.pop())-(e=r.pop())<=n)continue;const h=e+Math.ceil((i-e)/n/2)*n;quickselect(t,h,e,i,a),r.push(e,h,h,i)}}export{RBush as default};