const e=[171,75,84,88,32,50,48,187,13,10,26,10];var n,i,s,a,r,o,l,f;!function(t){t[t.NONE=0]="NONE",t[t.BASISLZ=1]="BASISLZ",t[t.ZSTD=2]="ZSTD",t[t.ZLIB=3]="ZLIB"}(n||(n={})),function(t){t[t.BASICFORMAT=0]="BASICFORMAT"}(i||(i={})),function(t){t[t.UNSPECIFIED=0]="UNSPECIFIED",t[t.ETC1S=163]="ETC1S",t[t.UASTC=166]="UASTC"}(s||(s={})),function(t){t[t.UNSPECIFIED=0]="UNSPECIFIED",t[t.SRGB=1]="SRGB"}(a||(a={})),function(t){t[t.UNSPECIFIED=0]="UNSPECIFIED",t[t.LINEAR=1]="LINEAR",t[t.SRGB=2]="SRGB",t[t.ITU=3]="ITU",t[t.NTSC=4]="NTSC",t[t.SLOG=5]="SLOG",t[t.SLOG2=6]="SLOG2"}(r||(r={})),function(t){t[t.ALPHA_STRAIGHT=0]="ALPHA_STRAIGHT",t[t.ALPHA_PREMULTIPLIED=1]="ALPHA_PREMULTIPLIED"}(o||(o={})),function(t){t[t.RGB=0]="RGB",t[t.RRR=3]="RRR",t[t.GGG=4]="GGG",t[t.AAA=15]="AAA"}(l||(l={})),function(t){t[t.RGB=0]="RGB",t[t.RGBA=3]="RGBA",t[t.RRR=4]="RRR",t[t.RRRG=5]="RRRG"}(f||(f={}));class U{constructor(){this.vkFormat=0,this.typeSize=1,this.pixelWidth=0,this.pixelHeight=0,this.pixelDepth=0,this.layerCount=0,this.faceCount=1,this.supercompressionScheme=n.NONE,this.levels=[],this.dataFormatDescriptor=[{vendorId:0,descriptorType:i.BASICFORMAT,versionNumber:2,descriptorBlockSize:40,colorModel:s.UNSPECIFIED,colorPrimaries:a.SRGB,transferFunction:a.SRGB,flags:o.ALPHA_STRAIGHT,texelBlockDimension:{x:4,y:4,z:1,w:1},bytesPlane:[],samples:[]}],this.keyValue={},this.globalData=null}}class c{constructor(t,e,n,i){this._dataView=new DataView(t.buffer,t.byteOffset+e,n),this._littleEndian=i,this._offset=0}_nextUint8(){const t=this._dataView.getUint8(this._offset);return this._offset+=1,t}_nextUint16(){const t=this._dataView.getUint16(this._offset,this._littleEndian);return this._offset+=2,t}_nextUint32(){const t=this._dataView.getUint32(this._offset,this._littleEndian);return this._offset+=4,t}_nextUint64(){const t=this._dataView.getUint32(this._offset,this._littleEndian)+2**32*this._dataView.getUint32(this._offset+4,this._littleEndian);return this._offset+=8,t}_skip(t){return this._offset+=t,this}_scan(t,e=0){const n=this._offset;let i=0;for(;this._dataView.getUint8(this._offset)!==e&&i<t;)i++,this._offset++;return i<t&&this._offset++,new Uint8Array(this._dataView.buffer,this._dataView.byteOffset+n,i)}}function _(t){return"undefined"!=typeof TextDecoder?(new TextDecoder).decode(t):Buffer.from(t).toString("utf8")}function p(t){const n=new Uint8Array(t.buffer,t.byteOffset,e.length);if(n[0]!==e[0]||n[1]!==e[1]||n[2]!==e[2]||n[3]!==e[3]||n[4]!==e[4]||n[5]!==e[5]||n[6]!==e[6]||n[7]!==e[7]||n[8]!==e[8]||n[9]!==e[9]||n[10]!==e[10]||n[11]!==e[11])throw new Error("Missing KTX 2.0 identifier.");const i=new U,s=17*Uint32Array.BYTES_PER_ELEMENT,o=new c(t,e.length,s,!0);i.vkFormat=o._nextUint32(),i.typeSize=o._nextUint32(),i.pixelWidth=o._nextUint32(),i.pixelHeight=o._nextUint32(),i.pixelDepth=o._nextUint32(),i.layerCount=o._nextUint32(),i.faceCount=o._nextUint32();const r=o._nextUint32();i.supercompressionScheme=o._nextUint32();const f=o._nextUint32(),a=o._nextUint32(),l=o._nextUint32(),x=o._nextUint32(),h=o._nextUint64(),u=o._nextUint64(),S=new c(t,e.length+s,3*r*8,!0);for(let e=0;e<r;e++)i.levels.push({levelData:new Uint8Array(t.buffer,t.byteOffset+S._nextUint64(),S._nextUint64()),uncompressedByteLength:S._nextUint64()});const p=new c(t,f,a,!0),d={vendorId:p._skip(4)._nextUint16(),descriptorType:p._nextUint16(),versionNumber:p._nextUint16(),descriptorBlockSize:p._nextUint16(),colorModel:p._nextUint8(),colorPrimaries:p._nextUint8(),transferFunction:p._nextUint8(),flags:p._nextUint8(),texelBlockDimension:{x:p._nextUint8()+1,y:p._nextUint8()+1,z:p._nextUint8()+1,w:p._nextUint8()+1},bytesPlane:[p._nextUint8(),p._nextUint8(),p._nextUint8(),p._nextUint8(),p._nextUint8(),p._nextUint8(),p._nextUint8(),p._nextUint8()],samples:[]},A=(d.descriptorBlockSize/4-6)/4;for(let t=0;t<A;t++)d.samples[t]={bitOffset:p._nextUint16(),bitLength:p._nextUint8(),channelID:p._nextUint8(),samplePosition:[p._nextUint8(),p._nextUint8(),p._nextUint8(),p._nextUint8()],sampleLower:p._nextUint32(),sampleUpper:p._nextUint32()};i.dataFormatDescriptor.length=0,i.dataFormatDescriptor.push(d);const R=new c(t,l,x,!0);for(;R._offset<x;){const t=R._nextUint32(),e=R._scan(t),n=_(e),s=R._scan(t-e.byteLength);i.keyValue[n]=n.match(/^ktx/i)?_(s):s,R._offset%4&&R._skip(4-R._offset%4)}if(u<=0)return i;const E=new c(t,h,u,!0),y=E._nextUint16(),I=E._nextUint16(),B=E._nextUint32(),w=E._nextUint32(),D=E._nextUint32(),b=E._nextUint32(),g=[];for(let t=0;t<r;t++)g.push({imageFlags:E._nextUint32(),rgbSliceByteOffset:E._nextUint32(),rgbSliceByteLength:E._nextUint32(),alphaSliceByteOffset:E._nextUint32(),alphaSliceByteLength:E._nextUint32()});const T=h+E._offset,G=T+B,m=G+w,L=m+D,C=new Uint8Array(t.buffer,t.byteOffset+T,B),P=new Uint8Array(t.buffer,t.byteOffset+G,w),O=new Uint8Array(t.buffer,t.byteOffset+m,D),N=new Uint8Array(t.buffer,t.byteOffset+L,b);return i.globalData={endpointCount:y,selectorCount:I,imageDescs:g,endpointsData:C,selectorsData:P,tablesData:O,extendedData:N},i}export{p as default};