import arrayRemoveDuplicates from"./arrayRemoveDuplicates.js";import BoundingRectangle from"./BoundingRectangle.js";import BoundingSphere from"./BoundingSphere.js";import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import ComponentDatatype from"./ComponentDatatype.js";import CornerType from"./CornerType.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import Ellipsoid from"./Ellipsoid.js";import Geometry from"./Geometry.js";import GeometryAttribute from"./GeometryAttribute.js";import GeometryAttributes from"./GeometryAttributes.js";import IndexDatatype from"./IndexDatatype.js";import CesiumMath from"./Math.js";import PolygonPipeline from"./PolygonPipeline.js";import PolylineVolumeGeometryLibrary from"./PolylineVolumeGeometryLibrary.js";import PrimitiveType from"./PrimitiveType.js";import WindingOrder from"./WindingOrder.js";function computeAttributes(e,r){var i=new GeometryAttributes;i.position=new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e});var o,t,n=r.length,a=i.position.values.length/3,l=e.length/3/n,s=IndexDatatype.createTypedArray(a,2*n*(l+1)),p=0,m=(o=0)*n;for(t=0;t<n-1;t++)s[p++]=t+m,s[p++]=t+m+1;for(s[p++]=n-1+m,s[p++]=m,m=(o=l-1)*n,t=0;t<n-1;t++)s[p++]=t+m,s[p++]=t+m+1;for(s[p++]=n-1+m,s[p++]=m,o=0;o<l-1;o++){var u=n*o,d=u+n;for(t=0;t<n;t++)s[p++]=t+u,s[p++]=t+d}return new Geometry({attributes:i,indices:IndexDatatype.createTypedArray(a,s),boundingSphere:BoundingSphere.fromVertices(e),primitiveType:PrimitiveType.LINES})}function PolylineVolumeOutlineGeometry(e){var r=(e=defaultValue(e,defaultValue.EMPTY_OBJECT)).polylinePositions,i=e.shapePositions;if(!defined(r))throw new DeveloperError("options.polylinePositions is required.");if(!defined(i))throw new DeveloperError("options.shapePositions is required.");this._positions=r,this._shape=i,this._ellipsoid=Ellipsoid.clone(defaultValue(e.ellipsoid,Ellipsoid.WGS84)),this._cornerType=defaultValue(e.cornerType,CornerType.ROUNDED),this._granularity=defaultValue(e.granularity,CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry";var o=1+r.length*Cartesian3.packedLength;o+=1+i.length*Cartesian2.packedLength,this.packedLength=o+Ellipsoid.packedLength+2}PolylineVolumeOutlineGeometry.pack=function(e,r,i){if(!defined(e))throw new DeveloperError("value is required");if(!defined(r))throw new DeveloperError("array is required");var o;i=defaultValue(i,0);var t=e._positions,n=t.length;for(r[i++]=n,o=0;o<n;++o,i+=Cartesian3.packedLength)Cartesian3.pack(t[o],r,i);var a=e._shape;for(n=a.length,r[i++]=n,o=0;o<n;++o,i+=Cartesian2.packedLength)Cartesian2.pack(a[o],r,i);return Ellipsoid.pack(e._ellipsoid,r,i),i+=Ellipsoid.packedLength,r[i++]=e._cornerType,r[i]=e._granularity,r};var scratchEllipsoid=Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),scratchOptions={polylinePositions:void 0,shapePositions:void 0,ellipsoid:scratchEllipsoid,height:void 0,cornerType:void 0,granularity:void 0};PolylineVolumeOutlineGeometry.unpack=function(e,r,i){if(!defined(e))throw new DeveloperError("array is required");var o;r=defaultValue(r,0);var t=e[r++],n=new Array(t);for(o=0;o<t;++o,r+=Cartesian3.packedLength)n[o]=Cartesian3.unpack(e,r);t=e[r++];var a=new Array(t);for(o=0;o<t;++o,r+=Cartesian2.packedLength)a[o]=Cartesian2.unpack(e,r);var l=Ellipsoid.unpack(e,r,scratchEllipsoid);r+=Ellipsoid.packedLength;var s=e[r++],p=e[r];return defined(i)?(i._positions=n,i._shape=a,i._ellipsoid=Ellipsoid.clone(l,i._ellipsoid),i._cornerType=s,i._granularity=p,i):(scratchOptions.polylinePositions=n,scratchOptions.shapePositions=a,scratchOptions.cornerType=s,scratchOptions.granularity=p,new PolylineVolumeOutlineGeometry(scratchOptions))};var brScratch=new BoundingRectangle;PolylineVolumeOutlineGeometry.createGeometry=function(e){var r=e._positions,i=arrayRemoveDuplicates(r,Cartesian3.equalsEpsilon),o=e._shape;if(o=PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(o),!(i.length<2||o.length<3)){PolygonPipeline.computeWindingOrder2D(o)===WindingOrder.CLOCKWISE&&o.reverse();var t=BoundingRectangle.fromPoints(o,brScratch);return computeAttributes(PolylineVolumeGeometryLibrary.computePositions(i,o,t,e,!1),o)}};export default PolylineVolumeOutlineGeometry;