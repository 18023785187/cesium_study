import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import Check from"./Check.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import CesiumMath from"./Math.js";import scaleToGeodeticSurface from"./scaleToGeodeticSurface.js";function initialize(e,i,a,r){i=defaultValue(i,0),a=defaultValue(a,0),r=defaultValue(r,0),Check.typeOf.number.greaterThanOrEquals("x",i,0),Check.typeOf.number.greaterThanOrEquals("y",a,0),Check.typeOf.number.greaterThanOrEquals("z",r,0),e._radii=new Cartesian3(i,a,r),e._radiiSquared=new Cartesian3(i*i,a*a,r*r),e._radiiToTheFourth=new Cartesian3(i*i*i*i,a*a*a*a,r*r*r*r),e._oneOverRadii=new Cartesian3(0===i?0:1/i,0===a?0:1/a,0===r?0:1/r),e._oneOverRadiiSquared=new Cartesian3(0===i?0:1/(i*i),0===a?0:1/(a*a),0===r?0:1/(r*r)),e._minimumRadius=Math.min(i,a,r),e._maximumRadius=Math.max(i,a,r),e._centerToleranceSquared=CesiumMath.EPSILON1,0!==e._radiiSquared.z&&(e._squaredXOverSquaredZ=e._radiiSquared.x/e._radiiSquared.z)}function Ellipsoid(e,i,a){this._radii=void 0,this._radiiSquared=void 0,this._radiiToTheFourth=void 0,this._oneOverRadii=void 0,this._oneOverRadiiSquared=void 0,this._minimumRadius=void 0,this._maximumRadius=void 0,this._centerToleranceSquared=void 0,this._squaredXOverSquaredZ=void 0,initialize(this,e,i,a)}Object.defineProperties(Ellipsoid.prototype,{radii:{get:function(){return this._radii}},radiiSquared:{get:function(){return this._radiiSquared}},radiiToTheFourth:{get:function(){return this._radiiToTheFourth}},oneOverRadii:{get:function(){return this._oneOverRadii}},oneOverRadiiSquared:{get:function(){return this._oneOverRadiiSquared}},minimumRadius:{get:function(){return this._minimumRadius}},maximumRadius:{get:function(){return this._maximumRadius}}}),Ellipsoid.clone=function(e,i){if(defined(e)){var a=e._radii;return defined(i)?(Cartesian3.clone(a,i._radii),Cartesian3.clone(e._radiiSquared,i._radiiSquared),Cartesian3.clone(e._radiiToTheFourth,i._radiiToTheFourth),Cartesian3.clone(e._oneOverRadii,i._oneOverRadii),Cartesian3.clone(e._oneOverRadiiSquared,i._oneOverRadiiSquared),i._minimumRadius=e._minimumRadius,i._maximumRadius=e._maximumRadius,i._centerToleranceSquared=e._centerToleranceSquared,i):new Ellipsoid(a.x,a.y,a.z)}},Ellipsoid.fromCartesian3=function(e,i){return defined(i)||(i=new Ellipsoid),defined(e)?(initialize(i,e.x,e.y,e.z),i):i},Ellipsoid.WGS84=Object.freeze(new Ellipsoid(6378137,6378137,6356752.314245179)),Ellipsoid.UNIT_SPHERE=Object.freeze(new Ellipsoid(1,1,1)),Ellipsoid.MOON=Object.freeze(new Ellipsoid(CesiumMath.LUNAR_RADIUS,CesiumMath.LUNAR_RADIUS,CesiumMath.LUNAR_RADIUS)),Ellipsoid.prototype.clone=function(e){return Ellipsoid.clone(this,e)},Ellipsoid.packedLength=Cartesian3.packedLength,Ellipsoid.pack=function(e,i,a){return Check.typeOf.object("value",e),Check.defined("array",i),a=defaultValue(a,0),Cartesian3.pack(e._radii,i,a),i},Ellipsoid.unpack=function(e,i,a){Check.defined("array",e),i=defaultValue(i,0);var r=Cartesian3.unpack(e,i);return Ellipsoid.fromCartesian3(r,a)},Ellipsoid.prototype.geocentricSurfaceNormal=Cartesian3.normalize,Ellipsoid.prototype.geodeticSurfaceNormalCartographic=function(e,i){Check.typeOf.object("cartographic",e);var a=e.longitude,r=e.latitude,t=Math.cos(r),n=t*Math.cos(a),o=t*Math.sin(a),s=Math.sin(r);return defined(i)||(i=new Cartesian3),i.x=n,i.y=o,i.z=s,Cartesian3.normalize(i,i)},Ellipsoid.prototype.geodeticSurfaceNormal=function(e,i){if(!Cartesian3.equalsEpsilon(e,Cartesian3.ZERO,CesiumMath.EPSILON14))return defined(i)||(i=new Cartesian3),i=Cartesian3.multiplyComponents(e,this._oneOverRadiiSquared,i),Cartesian3.normalize(i,i)};var cartographicToCartesianNormal=new Cartesian3,cartographicToCartesianK=new Cartesian3;Ellipsoid.prototype.cartographicToCartesian=function(e,i){var a=cartographicToCartesianNormal,r=cartographicToCartesianK;this.geodeticSurfaceNormalCartographic(e,a),Cartesian3.multiplyComponents(this._radiiSquared,a,r);var t=Math.sqrt(Cartesian3.dot(a,r));return Cartesian3.divideByScalar(r,t,r),Cartesian3.multiplyByScalar(a,e.height,a),defined(i)||(i=new Cartesian3),Cartesian3.add(r,a,i)},Ellipsoid.prototype.cartographicArrayToCartesianArray=function(e,i){Check.defined("cartographics",e);var a=e.length;defined(i)?i.length=a:i=new Array(a);for(var r=0;r<a;r++)i[r]=this.cartographicToCartesian(e[r],i[r]);return i};var cartesianToCartographicN=new Cartesian3,cartesianToCartographicP=new Cartesian3,cartesianToCartographicH=new Cartesian3;Ellipsoid.prototype.cartesianToCartographic=function(e,i){var a=this.scaleToGeodeticSurface(e,cartesianToCartographicP);if(defined(a)){var r=this.geodeticSurfaceNormal(a,cartesianToCartographicN),t=Cartesian3.subtract(e,a,cartesianToCartographicH),n=Math.atan2(r.y,r.x),o=Math.asin(r.z),s=CesiumMath.sign(Cartesian3.dot(t,e))*Cartesian3.magnitude(t);return defined(i)?(i.longitude=n,i.latitude=o,i.height=s,i):new Cartographic(n,o,s)}},Ellipsoid.prototype.cartesianArrayToCartographicArray=function(e,i){Check.defined("cartesians",e);var a=e.length;defined(i)?i.length=a:i=new Array(a);for(var r=0;r<a;++r)i[r]=this.cartesianToCartographic(e[r],i[r]);return i},Ellipsoid.prototype.scaleToGeodeticSurface=function(e,i){return scaleToGeodeticSurface(e,this._oneOverRadii,this._oneOverRadiiSquared,this._centerToleranceSquared,i)},Ellipsoid.prototype.scaleToGeocentricSurface=function(e,i){Check.typeOf.object("cartesian",e),defined(i)||(i=new Cartesian3);var a=e.x,r=e.y,t=e.z,n=this._oneOverRadiiSquared,o=1/Math.sqrt(a*a*n.x+r*r*n.y+t*t*n.z);return Cartesian3.multiplyByScalar(e,o,i)},Ellipsoid.prototype.transformPositionToScaledSpace=function(e,i){return defined(i)||(i=new Cartesian3),Cartesian3.multiplyComponents(e,this._oneOverRadii,i)},Ellipsoid.prototype.transformPositionFromScaledSpace=function(e,i){return defined(i)||(i=new Cartesian3),Cartesian3.multiplyComponents(e,this._radii,i)},Ellipsoid.prototype.equals=function(e){return this===e||defined(e)&&Cartesian3.equals(this._radii,e._radii)},Ellipsoid.prototype.toString=function(){return this._radii.toString()},Ellipsoid.prototype.getSurfaceNormalIntersectionWithZAxis=function(e,i,a){if(Check.typeOf.object("position",e),!CesiumMath.equalsEpsilon(this._radii.x,this._radii.y,CesiumMath.EPSILON15))throw new DeveloperError("Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)");Check.typeOf.number.greaterThan("Ellipsoid.radii.z",this._radii.z,0),i=defaultValue(i,0);var r=this._squaredXOverSquaredZ;if(defined(a)||(a=new Cartesian3),a.x=0,a.y=0,a.z=e.z*(1-r),!(Math.abs(a.z)>=this._radii.z-i))return a};var abscissas=[.14887433898163,.43339539412925,.67940956829902,.86506336668898,.97390652851717,0],weights=[.29552422471475,.26926671930999,.21908636251598,.14945134915058,.066671344308684,0];function gaussLegendreQuadrature(e,i,a){Check.typeOf.number("a",e),Check.typeOf.number("b",i),Check.typeOf.func("func",a);for(var r=.5*(i+e),t=.5*(i-e),n=0,o=0;o<5;o++){var s=t*abscissas[o];n+=weights[o]*(a(r+s)+a(r-s))}return n*t}Ellipsoid.prototype.surfaceArea=function(e){Check.typeOf.object("rectangle",e);for(var i=e.west,a=e.east,r=e.south,t=e.north;a<i;)a+=CesiumMath.TWO_PI;var n=this._radiiSquared,o=n.x,s=n.y,d=n.z,u=o*s;return gaussLegendreQuadrature(r,t,(function(e){var r=Math.cos(e),t=Math.sin(e);return Math.cos(e)*gaussLegendreQuadrature(i,a,(function(e){var i=Math.cos(e),a=Math.sin(e);return Math.sqrt(u*t*t+d*(s*i*i+o*a*a)*r*r)}))}))};export default Ellipsoid;