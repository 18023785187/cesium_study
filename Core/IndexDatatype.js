import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import CesiumMath from"./Math.js";import WebGLConstants from"./WebGLConstants.js";var IndexDatatype={UNSIGNED_BYTE:WebGLConstants.UNSIGNED_BYTE,UNSIGNED_SHORT:WebGLConstants.UNSIGNED_SHORT,UNSIGNED_INT:WebGLConstants.UNSIGNED_INT,getSizeInBytes:function(e){switch(e){case IndexDatatype.UNSIGNED_BYTE:return Uint8Array.BYTES_PER_ELEMENT;case IndexDatatype.UNSIGNED_SHORT:return Uint16Array.BYTES_PER_ELEMENT;case IndexDatatype.UNSIGNED_INT:return Uint32Array.BYTES_PER_ELEMENT}throw new DeveloperError("indexDatatype is required and must be a valid IndexDatatype constant.")},fromSizeInBytes:function(e){switch(e){case 2:return IndexDatatype.UNSIGNED_SHORT;case 4:return IndexDatatype.UNSIGNED_INT;case 1:return IndexDatatype.UNSIGNED_BYTE;default:throw new DeveloperError("Size in bytes cannot be mapped to an IndexDatatype")}},validate:function(e){return defined(e)&&(e===IndexDatatype.UNSIGNED_BYTE||e===IndexDatatype.UNSIGNED_SHORT||e===IndexDatatype.UNSIGNED_INT)},createTypedArray:function(e,r){if(!defined(e))throw new DeveloperError("numberOfVertices is required.");return e>=CesiumMath.SIXTY_FOUR_KILOBYTES?new Uint32Array(r):new Uint16Array(r)},createTypedArrayFromArrayBuffer:function(e,r,t,n){if(!defined(e))throw new DeveloperError("numberOfVertices is required.");if(!defined(r))throw new DeveloperError("sourceArray is required.");if(!defined(t))throw new DeveloperError("byteOffset is required.");return e>=CesiumMath.SIXTY_FOUR_KILOBYTES?new Uint32Array(r,t,n):new Uint16Array(r,t,n)}};export default Object.freeze(IndexDatatype);