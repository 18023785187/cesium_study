import BoundingSphere from"./BoundingSphere.js";import buildModuleUrl from"./buildModuleUrl.js";import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import Check from"./Check.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import Ellipsoid from"./Ellipsoid.js";import GeographicTilingScheme from"./GeographicTilingScheme.js";import Rectangle from"./Rectangle.js";import Resource from"./Resource.js";var scratchDiagonalCartesianNE=new Cartesian3,scratchDiagonalCartesianSW=new Cartesian3,scratchDiagonalCartographic=new Cartographic,scratchCenterCartesian=new Cartesian3,scratchSurfaceCartesian=new Cartesian3,scratchBoundingSphere=new BoundingSphere,tilingScheme=new GeographicTilingScheme,scratchCorners=[new Cartographic,new Cartographic,new Cartographic,new Cartographic],scratchTileXY=new Cartesian2,ApproximateTerrainHeights={};function getTileXYLevel(e){Cartographic.fromRadians(e.east,e.north,0,scratchCorners[0]),Cartographic.fromRadians(e.west,e.north,0,scratchCorners[1]),Cartographic.fromRadians(e.east,e.south,0,scratchCorners[2]),Cartographic.fromRadians(e.west,e.south,0,scratchCorners[3]);var r,i=0,a=0,t=0,n=0,o=ApproximateTerrainHeights._terrainHeightsMaxLevel;for(r=0;r<=o;++r){for(var s=!1,h=0;h<4;++h){var c=scratchCorners[h];if(tilingScheme.positionToTileXY(c,r,scratchTileXY),0===h)t=scratchTileXY.x,n=scratchTileXY.y;else if(t!==scratchTileXY.x||n!==scratchTileXY.y){s=!0;break}}if(s)break;i=t,a=n}if(0!==r)return{x:i,y:a,level:r>o?o:r-1}}ApproximateTerrainHeights.initialize=function(){var e=ApproximateTerrainHeights._initPromise;return defined(e)||(e=Resource.fetchJson(buildModuleUrl("Assets/approximateTerrainHeights.json")).then((function(e){ApproximateTerrainHeights._terrainHeights=e})),ApproximateTerrainHeights._initPromise=e),e},ApproximateTerrainHeights.getMinimumMaximumHeights=function(e,r){if(Check.defined("rectangle",e),!defined(ApproximateTerrainHeights._terrainHeights))throw new DeveloperError("You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function");r=defaultValue(r,Ellipsoid.WGS84);var i=getTileXYLevel(e),a=ApproximateTerrainHeights._defaultMinTerrainHeight,t=ApproximateTerrainHeights._defaultMaxTerrainHeight;if(defined(i)){var n=i.level+"-"+i.x+"-"+i.y,o=ApproximateTerrainHeights._terrainHeights[n];defined(o)&&(a=o[0],t=o[1]),r.cartographicToCartesian(Rectangle.northeast(e,scratchDiagonalCartographic),scratchDiagonalCartesianNE),r.cartographicToCartesian(Rectangle.southwest(e,scratchDiagonalCartographic),scratchDiagonalCartesianSW),Cartesian3.midpoint(scratchDiagonalCartesianSW,scratchDiagonalCartesianNE,scratchCenterCartesian);var s=r.scaleToGeodeticSurface(scratchCenterCartesian,scratchSurfaceCartesian);if(defined(s)){var h=Cartesian3.distance(scratchCenterCartesian,s);a=Math.min(a,-h)}else a=ApproximateTerrainHeights._defaultMinTerrainHeight}return{minimumTerrainHeight:a=Math.max(ApproximateTerrainHeights._defaultMinTerrainHeight,a),maximumTerrainHeight:t}},ApproximateTerrainHeights.getBoundingSphere=function(e,r){if(Check.defined("rectangle",e),!defined(ApproximateTerrainHeights._terrainHeights))throw new DeveloperError("You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function");r=defaultValue(r,Ellipsoid.WGS84);var i=getTileXYLevel(e),a=ApproximateTerrainHeights._defaultMaxTerrainHeight;if(defined(i)){var t=i.level+"-"+i.x+"-"+i.y,n=ApproximateTerrainHeights._terrainHeights[t];defined(n)&&(a=n[1])}var o=BoundingSphere.fromRectangle3D(e,r,0);return BoundingSphere.fromRectangle3D(e,r,a,scratchBoundingSphere),BoundingSphere.union(o,scratchBoundingSphere,o)},ApproximateTerrainHeights._terrainHeightsMaxLevel=6,ApproximateTerrainHeights._defaultMaxTerrainHeight=9e3,ApproximateTerrainHeights._defaultMinTerrainHeight=-1e5,ApproximateTerrainHeights._terrainHeights=void 0,ApproximateTerrainHeights._initPromise=void 0,Object.defineProperties(ApproximateTerrainHeights,{initialized:{get:function(){return defined(ApproximateTerrainHeights._terrainHeights)}}});export default ApproximateTerrainHeights;