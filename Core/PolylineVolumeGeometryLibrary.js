import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Cartesian4 from"./Cartesian4.js";import Cartographic from"./Cartographic.js";import CornerType from"./CornerType.js";import EllipsoidTangentPlane from"./EllipsoidTangentPlane.js";import CesiumMath from"./Math.js";import Matrix3 from"./Matrix3.js";import Matrix4 from"./Matrix4.js";import PolylinePipeline from"./PolylinePipeline.js";import Quaternion from"./Quaternion.js";import Transforms from"./Transforms.js";import oneTimeWarning from"../Core/oneTimeWarning.js";var scratch2Array=[new Cartesian3,new Cartesian3],scratchCartesian1=new Cartesian3,scratchCartesian2=new Cartesian3,scratchCartesian3=new Cartesian3,scratchCartesian4=new Cartesian3,scratchCartesian5=new Cartesian3,scratchCartesian6=new Cartesian3,scratchCartesian7=new Cartesian3,scratchCartesian8=new Cartesian3,scratchCartesian9=new Cartesian3,scratch1=new Cartesian3,scratch2=new Cartesian3,PolylineVolumeGeometryLibrary={},cartographic=new Cartographic;function scaleToSurface(a,r){for(var t=new Array(a.length),e=0;e<a.length;e++){var n=a[e];cartographic=r.cartesianToCartographic(n,cartographic),t[e]=cartographic.height,a[e]=r.scaleToGeodeticSurface(n,n)}return t}function subdivideHeights(a,r,t,e){var n,i=a[0],s=a[1],o=Cartesian3.angleBetween(i,s),c=Math.ceil(o/e),l=new Array(c);if(r===t){for(n=0;n<c;n++)l[n]=r;return l.push(t),l}var C=(t-r)/c;for(n=1;n<c;n++){var h=r+n*C;l[n]=h}return l[0]=r,l.push(t),l}var nextScratch=new Cartesian3,prevScratch=new Cartesian3;function computeRotationAngle(a,r,t,e){var n=new EllipsoidTangentPlane(t,e),i=n.projectPointOntoPlane(Cartesian3.add(t,a,nextScratch),nextScratch),s=n.projectPointOntoPlane(Cartesian3.add(t,r,prevScratch),prevScratch),o=Cartesian2.angleBetween(i,s);return s.x*i.y-s.y*i.x>=0?-o:o}var negativeX=new Cartesian3(-1,0,0),transform=new Matrix4,translation=new Matrix4,rotationZ=new Matrix3,scaleMatrix=Matrix3.IDENTITY.clone(),westScratch=new Cartesian3,finalPosScratch=new Cartesian4,heightCartesian=new Cartesian3;function addPosition(a,r,t,e,n,i,s,o){var c=westScratch,l=finalPosScratch;transform=Transforms.eastNorthUpToFixedFrame(a,n,transform),c=Matrix4.multiplyByPointAsVector(transform,negativeX,c);var C=computeRotationAngle(c=Cartesian3.normalize(c,c),r,a,n);rotationZ=Matrix3.fromRotationZ(C,rotationZ),heightCartesian.z=i,transform=Matrix4.multiplyTransformation(transform,Matrix4.fromRotationTranslation(rotationZ,heightCartesian,translation),transform);var h=scaleMatrix;h[0]=s;for(var m=0;m<o;m++)for(var u=0;u<t.length;u+=3)l=Cartesian3.fromArray(t,u,l),l=Matrix3.multiplyByVector(h,l,l),l=Matrix4.multiplyByPoint(transform,l,l),e.push(l.x,l.y,l.z);return e}var centerScratch=new Cartesian3;function addPositions(a,r,t,e,n,i,s){for(var o=0;o<a.length;o+=3)e=addPosition(Cartesian3.fromArray(a,o,centerScratch),r,t,e,n,i[o/3],s,1);return e}function convertShapeTo3DDuplicate(a,r){var t=a.length,e=new Array(6*t),n=0,i=r.x+r.width/2,s=r.y+r.height/2,o=a[0];e[n++]=o.x-i,e[n++]=0,e[n++]=o.y-s;for(var c=1;c<t;c++){var l=(o=a[c]).x-i,C=o.y-s;e[n++]=l,e[n++]=0,e[n++]=C,e[n++]=l,e[n++]=0,e[n++]=C}return o=a[0],e[n++]=o.x-i,e[n++]=0,e[n++]=o.y-s,e}function convertShapeTo3D(a,r){for(var t=a.length,e=new Array(3*t),n=0,i=r.x+r.width/2,s=r.y+r.height/2,o=0;o<t;o++)e[n++]=a[o].x-i,e[n++]=0,e[n++]=a[o].y-s;return e}var quaterion=new Quaternion,startPointScratch=new Cartesian3,rotMatrix=new Matrix3;function computeRoundCorner(a,r,t,e,n,i,s,o,c,l){var C,h,m=Cartesian3.angleBetween(Cartesian3.subtract(r,a,scratch1),Cartesian3.subtract(t,a,scratch2)),u=e===CornerType.BEVELED?0:Math.ceil(m/CesiumMath.toRadians(5));if(C=n?Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(a,scratch1),m/(u+1),quaterion),rotMatrix):Matrix3.fromQuaternion(Quaternion.fromAxisAngle(a,m/(u+1),quaterion),rotMatrix),r=Cartesian3.clone(r,startPointScratch),u>0)for(var y=l?2:1,d=0;d<u;d++)r=Matrix3.multiplyByVector(C,r,r),h=Cartesian3.subtract(r,a,scratch1),h=Cartesian3.normalize(h,h),n||(h=Cartesian3.negate(h,h)),s=addPosition(i.scaleToGeodeticSurface(r,scratch2),h,o,s,i,c,1,y);else h=Cartesian3.subtract(r,a,scratch1),h=Cartesian3.normalize(h,h),n||(h=Cartesian3.negate(h,h)),s=addPosition(i.scaleToGeodeticSurface(r,scratch2),h,o,s,i,c,1,1),t=Cartesian3.clone(t,startPointScratch),h=Cartesian3.subtract(t,a,scratch1),h=Cartesian3.normalize(h,h),n||(h=Cartesian3.negate(h,h)),s=addPosition(i.scaleToGeodeticSurface(t,scratch2),h,o,s,i,c,1,1);return s}PolylineVolumeGeometryLibrary.removeDuplicatesFromShape=function(a){for(var r=a.length,t=[],e=r-1,n=0;n<r;e=n++){var i=a[e],s=a[n];Cartesian2.equals(i,s)||t.push(s)}return t},PolylineVolumeGeometryLibrary.angleIsGreaterThanPi=function(a,r,t,e){var n=new EllipsoidTangentPlane(t,e),i=n.projectPointOntoPlane(Cartesian3.add(t,a,nextScratch),nextScratch),s=n.projectPointOntoPlane(Cartesian3.add(t,r,prevScratch),prevScratch);return s.x*i.y-s.y*i.x>=0};var scratchForwardProjection=new Cartesian3,scratchBackwardProjection=new Cartesian3;PolylineVolumeGeometryLibrary.computePositions=function(a,r,t,e,n){var i=e._ellipsoid,s=scaleToSurface(a,i),o=e._granularity,c=e._cornerType,l=n?convertShapeTo3DDuplicate(r,t):convertShapeTo3D(r,t),C=n?convertShapeTo3D(r,t):void 0,h=t.height/2,m=t.width/2,u=a.length,y=[],d=n?[]:void 0,p=scratchCartesian1,f=scratchCartesian2,g=scratchCartesian3,P=scratchCartesian4,v=scratchCartesian5,w=scratchCartesian6,x=scratchCartesian7,S=scratchCartesian8,T=scratchCartesian9,A=a[0],M=a[1];P=i.geodeticSurfaceNormal(A,P),p=Cartesian3.subtract(M,A,p),p=Cartesian3.normalize(p,p),S=Cartesian3.cross(P,p,S),S=Cartesian3.normalize(S,S);var j,b=s[0],B=s[1];n&&(d=addPosition(A,S,C,d,i,b+h,1,1)),T=Cartesian3.clone(A,T),A=M,f=Cartesian3.negate(p,f);for(var E=1;E<u-1;E++){var D=n?2:1;if(M=a[E+1],A.equals(M))oneTimeWarning("Positions are too close and are considered equivalent with rounding error.");else{p=Cartesian3.subtract(M,A,p),p=Cartesian3.normalize(p,p),g=Cartesian3.add(p,f,g),g=Cartesian3.normalize(g,g),P=i.geodeticSurfaceNormal(A,P);var z=Cartesian3.multiplyByScalar(P,Cartesian3.dot(p,P),scratchForwardProjection);Cartesian3.subtract(p,z,z),Cartesian3.normalize(z,z);var G=Cartesian3.multiplyByScalar(P,Cartesian3.dot(f,P),scratchBackwardProjection);if(Cartesian3.subtract(f,G,G),Cartesian3.normalize(G,G),CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(z,G)),1,CesiumMath.EPSILON7))y=addPosition(T,S,l,y,i,b+h,1,1),T=A;else{g=Cartesian3.cross(g,P,g),g=Cartesian3.cross(P,g,g),g=Cartesian3.normalize(g,g);var V=1/Math.max(.25,Cartesian3.magnitude(Cartesian3.cross(g,f,scratch1))),L=PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(p,f,A,i);L?(v=Cartesian3.add(A,Cartesian3.multiplyByScalar(g,V*m,g),v),w=Cartesian3.add(v,Cartesian3.multiplyByScalar(S,m,w),w),scratch2Array[0]=Cartesian3.clone(T,scratch2Array[0]),scratch2Array[1]=Cartesian3.clone(w,scratch2Array[1]),j=subdivideHeights(scratch2Array,b+h,B+h,o),y=addPositions(PolylinePipeline.generateArc({positions:scratch2Array,granularity:o,ellipsoid:i}),S,l,y,i,j,1),S=Cartesian3.cross(P,p,S),S=Cartesian3.normalize(S,S),x=Cartesian3.add(v,Cartesian3.multiplyByScalar(S,m,x),x),c===CornerType.ROUNDED||c===CornerType.BEVELED?computeRoundCorner(v,w,x,c,L,i,y,l,B+h,n):y=addPosition(A,g=Cartesian3.negate(g,g),l,y,i,B+h,V,D),T=Cartesian3.clone(x,T)):(v=Cartesian3.add(A,Cartesian3.multiplyByScalar(g,V*m,g),v),w=Cartesian3.add(v,Cartesian3.multiplyByScalar(S,-m,w),w),scratch2Array[0]=Cartesian3.clone(T,scratch2Array[0]),scratch2Array[1]=Cartesian3.clone(w,scratch2Array[1]),j=subdivideHeights(scratch2Array,b+h,B+h,o),y=addPositions(PolylinePipeline.generateArc({positions:scratch2Array,granularity:o,ellipsoid:i}),S,l,y,i,j,1),S=Cartesian3.cross(P,p,S),S=Cartesian3.normalize(S,S),x=Cartesian3.add(v,Cartesian3.multiplyByScalar(S,-m,x),x),c===CornerType.ROUNDED||c===CornerType.BEVELED?computeRoundCorner(v,w,x,c,L,i,y,l,B+h,n):y=addPosition(A,g,l,y,i,B+h,V,D),T=Cartesian3.clone(x,T)),f=Cartesian3.negate(p,f)}b=B,B=s[E+1],A=M}}scratch2Array[0]=Cartesian3.clone(T,scratch2Array[0]),scratch2Array[1]=Cartesian3.clone(A,scratch2Array[1]),j=subdivideHeights(scratch2Array,b+h,B+h,o),y=addPositions(PolylinePipeline.generateArc({positions:scratch2Array,granularity:o,ellipsoid:i}),S,l,y,i,j,1),n&&(d=addPosition(A,S,C,d,i,B+h,1,1)),u=y.length;var R=n?u+d.length:u,q=new Float64Array(R);return q.set(y),n&&q.set(d,u),q};export default PolylineVolumeGeometryLibrary;