import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import Check from"./Check.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import Ellipsoid from"./Ellipsoid.js";import CesiumMath from"./Math.js";function setConstants(t){var a=t._uSquared,e=t._ellipsoid.maximumRadius,i=t._ellipsoid.minimumRadius,n=(e-i)/e,s=Math.cos(t._startHeading),r=Math.sin(t._startHeading),o=(1-n)*Math.tan(t._start.latitude),d=1/Math.sqrt(1+o*o),h=d*o,c=Math.atan2(o,s),u=d*r,l=u*u,p=1-l,M=Math.sqrt(p),m=a/4,g=m*m,f=g*m,_=g*g,C=1+m-3*g/4+5*f/4-175*_/64,v=1-m+15*g/8-35*f/8,H=1-3*m+35*g/4,O=1-5*m,E=C*c-v*Math.sin(2*c)*m/2-H*Math.sin(4*c)*g/16-O*Math.sin(6*c)*f/48-5*Math.sin(8*c)*_/512,b=t._constants;b.a=e,b.b=i,b.f=n,b.cosineHeading=s,b.sineHeading=r,b.tanU=o,b.cosineU=d,b.sineU=h,b.sigma=c,b.sineAlpha=u,b.sineSquaredAlpha=l,b.cosineSquaredAlpha=p,b.cosineAlpha=M,b.u2Over4=m,b.u4Over16=g,b.u6Over64=f,b.u8Over256=_,b.a0=C,b.a1=v,b.a2=H,b.a3=O,b.distanceRatio=E}function computeC(t,a){return t*a*(4+t*(4-3*a))/16}function computeDeltaLambda(t,a,e,i,n,s,r){var o=computeC(t,e);return(1-o)*t*a*(i+o*n*(r+o*s*(2*r*r-1)))}function vincentyInverseFormula(t,a,e,i,n,s,r){var o,d,h,c,u,l=(a-e)/a,p=s-i,M=Math.atan((1-l)*Math.tan(n)),m=Math.atan((1-l)*Math.tan(r)),g=Math.cos(M),f=Math.sin(M),_=Math.cos(m),C=Math.sin(m),v=g*_,H=g*C,O=f*C,E=f*_,b=p,q=CesiumMath.TWO_PI,S=Math.cos(b),k=Math.sin(b);do{S=Math.cos(b),k=Math.sin(b);var j,P=H-E*S;h=Math.sqrt(_*_*k*k+P*P),d=O+v*S,o=Math.atan2(h,d),0===h?(j=0,c=1):c=1-(j=v*k/h)*j,q=b,u=d-2*O/c,isFinite(u)||(u=0),b=p+computeDeltaLambda(l,j,c,o,h,d,u)}while(Math.abs(b-q)>CesiumMath.EPSILON12);var U=c*(a*a-e*e)/(e*e),w=U*(256+U*(U*(74-47*U)-128))/1024,y=u*u,A=e*(1+U*(4096+U*(U*(320-175*U)-768))/16384)*(o-w*h*(u+w*(d*(2*y-1)-w*u*(4*h*h-3)*(4*y-3)/6)/4)),G=Math.atan2(_*k,H-E*S),D=Math.atan2(g*k,H*S-E);t._distance=A,t._startHeading=G,t._endHeading=D,t._uSquared=U}var scratchCart1=new Cartesian3,scratchCart2=new Cartesian3;function computeProperties(t,a,e,i){var n=Cartesian3.normalize(i.cartographicToCartesian(a,scratchCart2),scratchCart1),s=Cartesian3.normalize(i.cartographicToCartesian(e,scratchCart2),scratchCart2);Check.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(Cartesian3.angleBetween(n,s))-Math.PI),.0125),vincentyInverseFormula(t,i.maximumRadius,i.minimumRadius,a.longitude,a.latitude,e.longitude,e.latitude),t._start=Cartographic.clone(a,t._start),t._end=Cartographic.clone(e,t._end),t._start.height=0,t._end.height=0,setConstants(t)}function EllipsoidGeodesic(t,a,e){var i=defaultValue(e,Ellipsoid.WGS84);this._ellipsoid=i,this._start=new Cartographic,this._end=new Cartographic,this._constants={},this._startHeading=void 0,this._endHeading=void 0,this._distance=void 0,this._uSquared=void 0,defined(t)&&defined(a)&&computeProperties(this,t,a,i)}Object.defineProperties(EllipsoidGeodesic.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return Check.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},startHeading:{get:function(){return Check.defined("distance",this._distance),this._startHeading}},endHeading:{get:function(){return Check.defined("distance",this._distance),this._endHeading}}}),EllipsoidGeodesic.prototype.setEndPoints=function(t,a){Check.defined("start",t),Check.defined("end",a),computeProperties(this,t,a,this._ellipsoid)},EllipsoidGeodesic.prototype.interpolateUsingFraction=function(t,a){return this.interpolateUsingSurfaceDistance(this._distance*t,a)},EllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance=function(t,a){Check.defined("distance",this._distance);var e=this._constants,i=e.distanceRatio+t/e.b,n=Math.cos(2*i),s=Math.cos(4*i),r=Math.cos(6*i),o=Math.sin(2*i),d=Math.sin(4*i),h=Math.sin(6*i),c=Math.sin(8*i),u=i*i,l=i*u,p=e.u8Over256,M=e.u2Over4,m=e.u6Over64,g=e.u4Over16,f=2*l*p*n/3+i*(1-M+7*g/4-15*m/4+579*p/64-(g-15*m/4+187*p/16)*n-(5*m/4-115*p/16)*s-29*p*r/16)+(M/2-g+71*m/32-85*p/16)*o+(5*g/16-5*m/4+383*p/96)*d-u*((m-11*p/2)*o+5*p*d/2)+(29*m/96-29*p/16)*h+539*p*c/1536,_=Math.asin(Math.sin(f)*e.cosineAlpha),C=Math.atan(e.a/e.b*Math.tan(_));f-=e.sigma;var v=Math.cos(2*e.sigma+f),H=Math.sin(f),O=Math.cos(f),E=e.cosineU*O,b=e.sineU*H,q=Math.atan2(H*e.sineHeading,E-b*e.cosineHeading)-computeDeltaLambda(e.f,e.sineAlpha,e.cosineSquaredAlpha,f,H,O,v);return defined(a)?(a.longitude=this._start.longitude+q,a.latitude=C,a.height=0,a):new Cartographic(this._start.longitude+q,C,0)};export default EllipsoidGeodesic;