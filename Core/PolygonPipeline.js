import earcut from"../ThirdParty/earcut.js";import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import Check from"./Check.js";import ComponentDatatype from"./ComponentDatatype.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import Ellipsoid from"./Ellipsoid.js";import EllipsoidRhumbLine from"./EllipsoidRhumbLine.js";import Geometry from"./Geometry.js";import GeometryAttribute from"./GeometryAttribute.js";import CesiumMath from"./Math.js";import PrimitiveType from"./PrimitiveType.js";import WindingOrder from"./WindingOrder.js";var scaleToGeodeticHeightN=new Cartesian3,scaleToGeodeticHeightP=new Cartesian3,PolygonPipeline={computeArea2D:function(i){Check.defined("positions",i),Check.typeOf.number.greaterThanOrEquals("positions.length",i.length,3);for(var e=i.length,a=0,t=e-1,r=0;r<e;t=r++){var n=i[t],s=i[r];a+=n.x*s.y-s.x*n.y}return.5*a},computeWindingOrder2D:function(i){return PolygonPipeline.computeArea2D(i)>0?WindingOrder.COUNTER_CLOCKWISE:WindingOrder.CLOCKWISE},triangulate:function(i,e){Check.defined("positions",i);var a=Cartesian2.packArray(i);return earcut(a,e,2)}},subdivisionV0Scratch=new Cartesian3,subdivisionV1Scratch=new Cartesian3,subdivisionV2Scratch=new Cartesian3,subdivisionS0Scratch=new Cartesian3,subdivisionS1Scratch=new Cartesian3,subdivisionS2Scratch=new Cartesian3,subdivisionMidScratch=new Cartesian3;PolygonPipeline.computeSubdivision=function(i,e,a,t){t=defaultValue(t,CesiumMath.RADIANS_PER_DEGREE),Check.typeOf.object("ellipsoid",i),Check.defined("positions",e),Check.defined("indices",a),Check.typeOf.number.greaterThanOrEquals("indices.length",a.length,3),Check.typeOf.number.equals("indices.length % 3","0",a.length%3,0),Check.typeOf.number.greaterThan("granularity",t,0);var r,n=a.slice(0),s=e.length,o=new Array(3*s),c=0;for(r=0;r<s;r++){var h=e[r];o[c++]=h.x,o[c++]=h.y,o[c++]=h.z}for(var u=[],d={},p=i.maximumRadius,l=CesiumMath.chordLength(t,p),m=l*l;n.length>0;){var C,g,f=n.pop(),y=n.pop(),v=n.pop(),S=Cartesian3.fromArray(o,3*v,subdivisionV0Scratch),b=Cartesian3.fromArray(o,3*y,subdivisionV1Scratch),M=Cartesian3.fromArray(o,3*f,subdivisionV2Scratch),E=Cartesian3.multiplyByScalar(Cartesian3.normalize(S,subdivisionS0Scratch),p,subdivisionS0Scratch),P=Cartesian3.multiplyByScalar(Cartesian3.normalize(b,subdivisionS1Scratch),p,subdivisionS1Scratch),A=Cartesian3.multiplyByScalar(Cartesian3.normalize(M,subdivisionS2Scratch),p,subdivisionS2Scratch),T=Cartesian3.magnitudeSquared(Cartesian3.subtract(E,P,subdivisionMidScratch)),w=Cartesian3.magnitudeSquared(Cartesian3.subtract(P,A,subdivisionMidScratch)),x=Cartesian3.magnitudeSquared(Cartesian3.subtract(A,E,subdivisionMidScratch)),O=Math.max(T,w,x);O>m?T===O?(r=d[C=Math.min(v,y)+" "+Math.max(v,y)],defined(r)||(g=Cartesian3.add(S,b,subdivisionMidScratch),Cartesian3.multiplyByScalar(g,.5,g),o.push(g.x,g.y,g.z),r=o.length/3-1,d[C]=r),n.push(v,r,f),n.push(r,y,f)):w===O?(r=d[C=Math.min(y,f)+" "+Math.max(y,f)],defined(r)||(g=Cartesian3.add(b,M,subdivisionMidScratch),Cartesian3.multiplyByScalar(g,.5,g),o.push(g.x,g.y,g.z),r=o.length/3-1,d[C]=r),n.push(y,r,v),n.push(r,f,v)):x===O&&(r=d[C=Math.min(f,v)+" "+Math.max(f,v)],defined(r)||(g=Cartesian3.add(M,S,subdivisionMidScratch),Cartesian3.multiplyByScalar(g,.5,g),o.push(g.x,g.y,g.z),r=o.length/3-1,d[C]=r),n.push(f,r,y),n.push(r,v,y)):(u.push(v),u.push(y),u.push(f))}return new Geometry({attributes:{position:new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o})},indices:u,primitiveType:PrimitiveType.TRIANGLES})};var subdivisionC0Scratch=new Cartographic,subdivisionC1Scratch=new Cartographic,subdivisionC2Scratch=new Cartographic,subdivisionCartographicScratch=new Cartographic;PolygonPipeline.computeRhumbLineSubdivision=function(i,e,a,t){t=defaultValue(t,CesiumMath.RADIANS_PER_DEGREE),Check.typeOf.object("ellipsoid",i),Check.defined("positions",e),Check.defined("indices",a),Check.typeOf.number.greaterThanOrEquals("indices.length",a.length,3),Check.typeOf.number.equals("indices.length % 3","0",a.length%3,0),Check.typeOf.number.greaterThan("granularity",t,0);var r,n=a.slice(0),s=e.length,o=new Array(3*s),c=0;for(r=0;r<s;r++){var h=e[r];o[c++]=h.x,o[c++]=h.y,o[c++]=h.z}for(var u=[],d={},p=i.maximumRadius,l=CesiumMath.chordLength(t,p),m=new EllipsoidRhumbLine(void 0,void 0,i),C=new EllipsoidRhumbLine(void 0,void 0,i),g=new EllipsoidRhumbLine(void 0,void 0,i);n.length>0;){var f=n.pop(),y=n.pop(),v=n.pop(),S=Cartesian3.fromArray(o,3*v,subdivisionV0Scratch),b=Cartesian3.fromArray(o,3*y,subdivisionV1Scratch),M=Cartesian3.fromArray(o,3*f,subdivisionV2Scratch),E=i.cartesianToCartographic(S,subdivisionC0Scratch),P=i.cartesianToCartographic(b,subdivisionC1Scratch),A=i.cartesianToCartographic(M,subdivisionC2Scratch);m.setEndPoints(E,P);var T=m.surfaceDistance;C.setEndPoints(P,A);var w=C.surfaceDistance;g.setEndPoints(A,E);var x,O,R,G,k=g.surfaceDistance,D=Math.max(T,w,k);D>l?T===D?(r=d[x=Math.min(v,y)+" "+Math.max(v,y)],defined(r)||(O=m.interpolateUsingFraction(.5,subdivisionCartographicScratch),R=.5*(E.height+P.height),G=Cartesian3.fromRadians(O.longitude,O.latitude,R,i,subdivisionMidScratch),o.push(G.x,G.y,G.z),r=o.length/3-1,d[x]=r),n.push(v,r,f),n.push(r,y,f)):w===D?(r=d[x=Math.min(y,f)+" "+Math.max(y,f)],defined(r)||(O=C.interpolateUsingFraction(.5,subdivisionCartographicScratch),R=.5*(P.height+A.height),G=Cartesian3.fromRadians(O.longitude,O.latitude,R,i,subdivisionMidScratch),o.push(G.x,G.y,G.z),r=o.length/3-1,d[x]=r),n.push(y,r,v),n.push(r,f,v)):k===D&&(r=d[x=Math.min(f,v)+" "+Math.max(f,v)],defined(r)||(O=g.interpolateUsingFraction(.5,subdivisionCartographicScratch),R=.5*(A.height+E.height),G=Cartesian3.fromRadians(O.longitude,O.latitude,R,i,subdivisionMidScratch),o.push(G.x,G.y,G.z),r=o.length/3-1,d[x]=r),n.push(f,r,y),n.push(r,v,y)):(u.push(v),u.push(y),u.push(f))}return new Geometry({attributes:{position:new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o})},indices:u,primitiveType:PrimitiveType.TRIANGLES})},PolygonPipeline.scaleToGeodeticHeight=function(i,e,a,t){a=defaultValue(a,Ellipsoid.WGS84);var r=scaleToGeodeticHeightN,n=scaleToGeodeticHeightP;if(e=defaultValue(e,0),t=defaultValue(t,!0),defined(i))for(var s=i.length,o=0;o<s;o+=3)Cartesian3.fromArray(i,o,n),t&&(n=a.scaleToGeodeticSurface(n,n)),0!==e&&(r=a.geodeticSurfaceNormal(n,r),Cartesian3.multiplyByScalar(r,e,r),Cartesian3.add(n,r,n)),i[o]=n.x,i[o+1]=n.y,i[o+2]=n.z;return i};export default PolygonPipeline;