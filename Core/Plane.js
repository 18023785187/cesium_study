import Cartesian3 from"./Cartesian3.js";import Cartesian4 from"./Cartesian4.js";import Check from"./Check.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import CesiumMath from"./Math.js";import Matrix4 from"./Matrix4.js";function Plane(e,a){if(Check.typeOf.object("normal",e),!CesiumMath.equalsEpsilon(Cartesian3.magnitude(e),1,CesiumMath.EPSILON6))throw new DeveloperError("normal must be normalized.");Check.typeOf.number("distance",a),this.normal=Cartesian3.clone(e),this.distance=a}Plane.fromPointNormal=function(e,a,n){if(Check.typeOf.object("point",e),Check.typeOf.object("normal",a),!CesiumMath.equalsEpsilon(Cartesian3.magnitude(a),1,CesiumMath.EPSILON6))throw new DeveloperError("normal must be normalized.");var r=-Cartesian3.dot(a,e);return defined(n)?(Cartesian3.clone(a,n.normal),n.distance=r,n):new Plane(a,r)};var scratchNormal=new Cartesian3;Plane.fromCartesian4=function(e,a){Check.typeOf.object("coefficients",e);var n=Cartesian3.fromCartesian4(e,scratchNormal),r=e.w;if(!CesiumMath.equalsEpsilon(Cartesian3.magnitude(n),1,CesiumMath.EPSILON6))throw new DeveloperError("normal must be normalized.");return defined(a)?(Cartesian3.clone(n,a.normal),a.distance=r,a):new Plane(n,r)},Plane.getPointDistance=function(e,a){return Check.typeOf.object("plane",e),Check.typeOf.object("point",a),Cartesian3.dot(e.normal,a)+e.distance};var scratchCartesian=new Cartesian3;Plane.projectPointOntoPlane=function(e,a,n){Check.typeOf.object("plane",e),Check.typeOf.object("point",a),defined(n)||(n=new Cartesian3);var r=Plane.getPointDistance(e,a),t=Cartesian3.multiplyByScalar(e.normal,r,scratchCartesian);return Cartesian3.subtract(a,t,n)};var scratchInverseTranspose=new Matrix4,scratchPlaneCartesian4=new Cartesian4,scratchTransformNormal=new Cartesian3;Plane.transform=function(e,a,n){Check.typeOf.object("plane",e),Check.typeOf.object("transform",a);var r=e.normal,t=e.distance,i=Matrix4.inverseTranspose(a,scratchInverseTranspose),o=Cartesian4.fromElements(r.x,r.y,r.z,t,scratchPlaneCartesian4);o=Matrix4.multiplyByVector(i,o,o);var s=Cartesian3.fromCartesian4(o,scratchTransformNormal);return o=Cartesian4.divideByScalar(o,Cartesian3.magnitude(s),o),Plane.fromCartesian4(o,n)},Plane.clone=function(e,a){return Check.typeOf.object("plane",e),defined(a)?(Cartesian3.clone(e.normal,a.normal),a.distance=e.distance,a):new Plane(e.normal,e.distance)},Plane.equals=function(e,a){return Check.typeOf.object("left",e),Check.typeOf.object("right",a),e.distance===a.distance&&Cartesian3.equals(e.normal,a.normal)},Plane.ORIGIN_XY_PLANE=Object.freeze(new Plane(Cartesian3.UNIT_Z,0)),Plane.ORIGIN_YZ_PLANE=Object.freeze(new Plane(Cartesian3.UNIT_X,0)),Plane.ORIGIN_ZX_PLANE=Object.freeze(new Plane(Cartesian3.UNIT_Y,0));export default Plane;