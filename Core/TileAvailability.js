import binarySearch from"./binarySearch.js";import Cartographic from"./Cartographic.js";import defined from"./defined.js";import Rectangle from"./Rectangle.js";function TileAvailability(e,t){this._tilingScheme=e,this._maximumLevel=t,this._rootNodes=[]}var rectangleScratch=new Rectangle;function findNode(e,t,n,a){for(var i=a.length,r=0;r<i;++r){var s=a[r];if(s.x===t&&s.y===n&&s.level===e)return!0}return!1}TileAvailability.prototype.addAvailableTileRange=function(e,t,n,a,i){var r=this._tilingScheme,s=this._rootNodes;if(0===e)for(var l=n;l<=i;++l)for(var o=t;o<=a;++o)findNode(e,o,l,s)||s.push(new QuadtreeNode(r,void 0,0,o,l));r.tileXYToRectangle(t,n,e,rectangleScratch);var h=rectangleScratch.west,c=rectangleScratch.north;r.tileXYToRectangle(a,i,e,rectangleScratch);for(var g=rectangleScratch.east,u=new RectangleWithLevel(e,h,rectangleScratch.south,g,c),v=0;v<s.length;++v){var d=s[v];rectanglesOverlap(d.extent,u)&&putRectangleInQuadtree(this._maximumLevel,d,u)}},TileAvailability.prototype.computeMaximumLevelAtPosition=function(e){for(var t,n=0;n<this._rootNodes.length;++n){var a=this._rootNodes[n];if(rectangleContainsPosition(a.extent,e)){t=a;break}}return defined(t)?findMaxLevelFromNode(void 0,t,e):-1};var rectanglesScratch=[],remainingToCoverByLevelScratch=[],westScratch=new Rectangle,eastScratch=new Rectangle;TileAvailability.prototype.computeBestAvailableLevelOverRectangle=function(e){var t=rectanglesScratch;t.length=0,e.east<e.west?(t.push(Rectangle.fromRadians(-Math.PI,e.south,e.east,e.north,westScratch)),t.push(Rectangle.fromRadians(e.west,e.south,Math.PI,e.north,eastScratch))):t.push(e);var n,a=remainingToCoverByLevelScratch;for(a.length=0,n=0;n<this._rootNodes.length;++n)updateCoverageWithNode(a,this._rootNodes[n],t);for(n=a.length-1;n>=0;--n)if(defined(a[n])&&0===a[n].length)return n;return 0};var cartographicScratch=new Cartographic;function QuadtreeNode(e,t,n,a,i){this.tilingScheme=e,this.parent=t,this.level=n,this.x=a,this.y=i,this.extent=e.tileXYToRectangle(a,i,n),this.rectangles=[],this._sw=void 0,this._se=void 0,this._nw=void 0,this._ne=void 0}function RectangleWithLevel(e,t,n,a,i){this.level=e,this.west=t,this.south=n,this.east=a,this.north=i}function rectanglesOverlap(e,t){var n=Math.max(e.west,t.west),a=Math.max(e.south,t.south),i=Math.min(e.east,t.east);return a<Math.min(e.north,t.north)&&n<i}function putRectangleInQuadtree(e,t,n){for(;t.level<e;)if(rectangleFullyContainsRectangle(t.nw.extent,n))t=t.nw;else if(rectangleFullyContainsRectangle(t.ne.extent,n))t=t.ne;else if(rectangleFullyContainsRectangle(t.sw.extent,n))t=t.sw;else{if(!rectangleFullyContainsRectangle(t.se.extent,n))break;t=t.se}if(0===t.rectangles.length||t.rectangles[t.rectangles.length-1].level<=n.level)t.rectangles.push(n);else{var a=binarySearch(t.rectangles,n.level,rectangleLevelComparator);a<0&&(a=~a),t.rectangles.splice(a,0,n)}}function rectangleLevelComparator(e,t){return e.level-t}function rectangleFullyContainsRectangle(e,t){return t.west>=e.west&&t.east<=e.east&&t.south>=e.south&&t.north<=e.north}function rectangleContainsPosition(e,t){return t.longitude>=e.west&&t.longitude<=e.east&&t.latitude>=e.south&&t.latitude<=e.north}function findMaxLevelFromNode(e,t,n){for(var a=0,i=!1;!i;){var r=t._nw&&rectangleContainsPosition(t._nw.extent,n),s=t._ne&&rectangleContainsPosition(t._ne.extent,n),l=t._sw&&rectangleContainsPosition(t._sw.extent,n),o=t._se&&rectangleContainsPosition(t._se.extent,n);if(r+s+l+o>1){r&&(a=Math.max(a,findMaxLevelFromNode(t,t._nw,n))),s&&(a=Math.max(a,findMaxLevelFromNode(t,t._ne,n))),l&&(a=Math.max(a,findMaxLevelFromNode(t,t._sw,n))),o&&(a=Math.max(a,findMaxLevelFromNode(t,t._se,n)));break}r?t=t._nw:s?t=t._ne:l?t=t._sw:o?t=t._se:i=!0}for(;t!==e;){for(var h=t.rectangles,c=h.length-1;c>=0&&h[c].level>a;--c){var g=h[c];rectangleContainsPosition(g,n)&&(a=g.level)}t=t.parent}return a}function updateCoverageWithNode(e,t,n){if(t){var a,i=!1;for(a=0;a<n.length;++a)i=i||rectanglesOverlap(t.extent,n[a]);if(i){var r=t.rectangles;for(a=0;a<r.length;++a){var s=r[a];e[s.level]||(e[s.level]=n),e[s.level]=subtractRectangle(e[s.level],s)}updateCoverageWithNode(e,t._nw,n),updateCoverageWithNode(e,t._ne,n),updateCoverageWithNode(e,t._sw,n),updateCoverageWithNode(e,t._se,n)}}}function subtractRectangle(e,t){for(var n=[],a=0;a<e.length;++a){var i=e[a];rectanglesOverlap(i,t)?(i.west<t.west&&n.push(new Rectangle(i.west,i.south,t.west,i.north)),i.east>t.east&&n.push(new Rectangle(t.east,i.south,i.east,i.north)),i.south<t.south&&n.push(new Rectangle(Math.max(t.west,i.west),i.south,Math.min(t.east,i.east),t.south)),i.north>t.north&&n.push(new Rectangle(Math.max(t.west,i.west),t.north,Math.min(t.east,i.east),i.north))):n.push(i)}return n}TileAvailability.prototype.isTileAvailable=function(e,t,n){var a=this._tilingScheme.tileXYToRectangle(t,n,e,rectangleScratch);return Rectangle.center(a,cartographicScratch),this.computeMaximumLevelAtPosition(cartographicScratch)>=e},TileAvailability.prototype.computeChildMaskForTile=function(e,t,n){var a=e+1;if(a>=this._maximumLevel)return 0;var i=0;return i|=this.isTileAvailable(a,2*t,2*n+1)?1:0,i|=this.isTileAvailable(a,2*t+1,2*n+1)?2:0,(i|=this.isTileAvailable(a,2*t,2*n)?4:0)|(this.isTileAvailable(a,2*t+1,2*n)?8:0)},Object.defineProperties(QuadtreeNode.prototype,{nw:{get:function(){return this._nw||(this._nw=new QuadtreeNode(this.tilingScheme,this,this.level+1,2*this.x,2*this.y)),this._nw}},ne:{get:function(){return this._ne||(this._ne=new QuadtreeNode(this.tilingScheme,this,this.level+1,2*this.x+1,2*this.y)),this._ne}},sw:{get:function(){return this._sw||(this._sw=new QuadtreeNode(this.tilingScheme,this,this.level+1,2*this.x,2*this.y+1)),this._sw}},se:{get:function(){return this._se||(this._se=new QuadtreeNode(this.tilingScheme,this,this.level+1,2*this.x+1,2*this.y+1)),this._se}}});export default TileAvailability;