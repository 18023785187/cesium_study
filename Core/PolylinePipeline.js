import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import Ellipsoid from"./Ellipsoid.js";import EllipsoidGeodesic from"./EllipsoidGeodesic.js";import EllipsoidRhumbLine from"./EllipsoidRhumbLine.js";import IntersectionTests from"./IntersectionTests.js";import CesiumMath from"./Math.js";import Matrix4 from"./Matrix4.js";import Plane from"./Plane.js";var PolylinePipeline={numberOfPoints:function(e,a,r){var i=Cartesian3.distance(e,a);return Math.ceil(i/r)},numberOfPointsRhumbLine:function(e,a,r){var i=Math.pow(e.longitude-a.longitude,2)+Math.pow(e.latitude-a.latitude,2);return Math.max(1,Math.ceil(Math.sqrt(i/(r*r))))}},cartoScratch=new Cartographic;PolylinePipeline.extractHeights=function(e,a){for(var r=e.length,i=new Array(r),t=0;t<r;t++){var n=e[t];i[t]=a.cartesianToCartographic(n,cartoScratch).height}return i};var wrapLongitudeInversMatrix=new Matrix4,wrapLongitudeOrigin=new Cartesian3,wrapLongitudeXZNormal=new Cartesian3,wrapLongitudeXZPlane=new Plane(Cartesian3.UNIT_X,0),wrapLongitudeYZNormal=new Cartesian3,wrapLongitudeYZPlane=new Plane(Cartesian3.UNIT_X,0),wrapLongitudeIntersection=new Cartesian3,wrapLongitudeOffset=new Cartesian3,subdivideHeightsScratchArray=[];function subdivideHeights(e,a,r){var i,t=subdivideHeightsScratchArray;if(t.length=e,a===r){for(i=0;i<e;i++)t[i]=a;return t}var n=(r-a)/e;for(i=0;i<e;i++){var o=a+i*n;t[i]=o}return t}var carto1=new Cartographic,carto2=new Cartographic,cartesian=new Cartesian3,scaleFirst=new Cartesian3,scaleLast=new Cartesian3,ellipsoidGeodesic=new EllipsoidGeodesic,ellipsoidRhumb=new EllipsoidRhumbLine;function generateCartesianArc(e,a,r,i,t,n,o,s){var l=i.scaleToGeodeticSurface(e,scaleFirst),c=i.scaleToGeodeticSurface(a,scaleLast),u=PolylinePipeline.numberOfPoints(e,a,r),p=i.cartesianToCartographic(l,carto1),d=i.cartesianToCartographic(c,carto2),h=subdivideHeights(u,t,n);ellipsoidGeodesic.setEndPoints(p,d);var g=ellipsoidGeodesic.surfaceDistance/u,f=s;p.height=t;var m=i.cartographicToCartesian(p,cartesian);Cartesian3.pack(m,o,f),f+=3;for(var C=1;C<u;C++){var v=ellipsoidGeodesic.interpolateUsingSurfaceDistance(C*g,carto2);v.height=h[C],m=i.cartographicToCartesian(v,cartesian),Cartesian3.pack(m,o,f),f+=3}return f}function generateCartesianRhumbArc(e,a,r,i,t,n,o,s){var l=i.cartesianToCartographic(e,carto1),c=i.cartesianToCartographic(a,carto2),u=PolylinePipeline.numberOfPointsRhumbLine(l,c,r);l.height=0,c.height=0;var p=subdivideHeights(u,t,n);ellipsoidRhumb.ellipsoid.equals(i)||(ellipsoidRhumb=new EllipsoidRhumbLine(void 0,void 0,i)),ellipsoidRhumb.setEndPoints(l,c);var d=ellipsoidRhumb.surfaceDistance/u,h=s;l.height=t;var g=i.cartographicToCartesian(l,cartesian);Cartesian3.pack(g,o,h),h+=3;for(var f=1;f<u;f++){var m=ellipsoidRhumb.interpolateUsingSurfaceDistance(f*d,carto2);m.height=p[f],g=i.cartographicToCartesian(m,cartesian),Cartesian3.pack(g,o,h),h+=3}return h}PolylinePipeline.wrapLongitude=function(e,a){var r=[],i=[];if(defined(e)&&e.length>0){a=defaultValue(a,Matrix4.IDENTITY);var t=Matrix4.inverseTransformation(a,wrapLongitudeInversMatrix),n=Matrix4.multiplyByPoint(t,Cartesian3.ZERO,wrapLongitudeOrigin),o=Cartesian3.normalize(Matrix4.multiplyByPointAsVector(t,Cartesian3.UNIT_Y,wrapLongitudeXZNormal),wrapLongitudeXZNormal),s=Plane.fromPointNormal(n,o,wrapLongitudeXZPlane),l=Cartesian3.normalize(Matrix4.multiplyByPointAsVector(t,Cartesian3.UNIT_X,wrapLongitudeYZNormal),wrapLongitudeYZNormal),c=Plane.fromPointNormal(n,l,wrapLongitudeYZPlane),u=1;r.push(Cartesian3.clone(e[0]));for(var p=r[0],d=e.length,h=1;h<d;++h){var g=e[h];if(Plane.getPointDistance(c,p)<0||Plane.getPointDistance(c,g)<0){var f=IntersectionTests.lineSegmentPlane(p,g,s,wrapLongitudeIntersection);if(defined(f)){var m=Cartesian3.multiplyByScalar(o,5e-9,wrapLongitudeOffset);Plane.getPointDistance(s,p)<0&&Cartesian3.negate(m,m),r.push(Cartesian3.add(f,m,new Cartesian3)),i.push(u+1),Cartesian3.negate(m,m),r.push(Cartesian3.add(f,m,new Cartesian3)),u=1}}r.push(Cartesian3.clone(e[h])),u++,p=g}i.push(u)}return{positions:r,lengths:i}},PolylinePipeline.generateArc=function(e){defined(e)||(e={});var a=e.positions;if(!defined(a))throw new DeveloperError("options.positions is required.");var r=a.length,i=defaultValue(e.ellipsoid,Ellipsoid.WGS84),t=defaultValue(e.height,0),n=Array.isArray(t);if(r<1)return[];if(1===r){var o=i.scaleToGeodeticSurface(a[0],scaleFirst);if(0!==(t=n?t[0]:t)){var s=i.geodeticSurfaceNormal(o,cartesian);Cartesian3.multiplyByScalar(s,t,s),Cartesian3.add(o,s,o)}return[o.x,o.y,o.z]}var l=e.minDistance;if(!defined(l)){var c=defaultValue(e.granularity,CesiumMath.RADIANS_PER_DEGREE);l=CesiumMath.chordLength(c,i.maximumRadius)}var u,p=0;for(u=0;u<r-1;u++)p+=PolylinePipeline.numberOfPoints(a[u],a[u+1],l);var d=3*(p+1),h=new Array(d),g=0;for(u=0;u<r-1;u++)g=generateCartesianArc(a[u],a[u+1],l,i,n?t[u]:t,n?t[u+1]:t,h,g);subdivideHeightsScratchArray.length=0;var f=a[r-1],m=i.cartesianToCartographic(f,carto1);m.height=n?t[r-1]:t;var C=i.cartographicToCartesian(m,cartesian);return Cartesian3.pack(C,h,d-3),h};var scratchCartographic0=new Cartographic,scratchCartographic1=new Cartographic;PolylinePipeline.generateRhumbArc=function(e){defined(e)||(e={});var a=e.positions;if(!defined(a))throw new DeveloperError("options.positions is required.");var r=a.length,i=defaultValue(e.ellipsoid,Ellipsoid.WGS84),t=defaultValue(e.height,0),n=Array.isArray(t);if(r<1)return[];if(1===r){var o=i.scaleToGeodeticSurface(a[0],scaleFirst);if(0!==(t=n?t[0]:t)){var s=i.geodeticSurfaceNormal(o,cartesian);Cartesian3.multiplyByScalar(s,t,s),Cartesian3.add(o,s,o)}return[o.x,o.y,o.z]}var l,c,u=defaultValue(e.granularity,CesiumMath.RADIANS_PER_DEGREE),p=0,d=i.cartesianToCartographic(a[0],scratchCartographic0);for(l=0;l<r-1;l++)c=i.cartesianToCartographic(a[l+1],scratchCartographic1),p+=PolylinePipeline.numberOfPointsRhumbLine(d,c,u),d=Cartographic.clone(c,scratchCartographic0);var h=3*(p+1),g=new Array(h),f=0;for(l=0;l<r-1;l++)f=generateCartesianRhumbArc(a[l],a[l+1],u,i,n?t[l]:t,n?t[l+1]:t,g,f);subdivideHeightsScratchArray.length=0;var m=a[r-1],C=i.cartesianToCartographic(m,carto1);C.height=n?t[r-1]:t;var v=i.cartographicToCartesian(C,cartesian);return Cartesian3.pack(v,g,h-3),g},PolylinePipeline.generateCartesianArc=function(e){for(var a=PolylinePipeline.generateArc(e),r=a.length/3,i=new Array(r),t=0;t<r;t++)i[t]=Cartesian3.unpack(a,3*t);return i},PolylinePipeline.generateCartesianRhumbArc=function(e){for(var a=PolylinePipeline.generateRhumbArc(e),r=a.length/3,i=new Array(r),t=0;t<r;t++)i[t]=Cartesian3.unpack(a,3*t);return i};export default PolylinePipeline;