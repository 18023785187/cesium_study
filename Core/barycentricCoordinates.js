import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Check from"./Check.js";import defined from"./defined.js";import CesiumMath from"./Math.js";var scratchCartesian1=new Cartesian3,scratchCartesian2=new Cartesian3,scratchCartesian3=new Cartesian3;function barycentricCoordinates(a,e,t,r,s){var i,n,C,c,o,d,u,f;if(Check.defined("point",a),Check.defined("p0",e),Check.defined("p1",t),Check.defined("p2",r),defined(s)||(s=new Cartesian3),defined(e.z)){if(Cartesian3.equalsEpsilon(a,e,CesiumMath.EPSILON14))return Cartesian3.clone(Cartesian3.UNIT_X,s);if(Cartesian3.equalsEpsilon(a,t,CesiumMath.EPSILON14))return Cartesian3.clone(Cartesian3.UNIT_Y,s);if(Cartesian3.equalsEpsilon(a,r,CesiumMath.EPSILON14))return Cartesian3.clone(Cartesian3.UNIT_Z,s);i=Cartesian3.subtract(t,e,scratchCartesian1),n=Cartesian3.subtract(r,e,scratchCartesian2),C=Cartesian3.subtract(a,e,scratchCartesian3),c=Cartesian3.dot(i,i),o=Cartesian3.dot(i,n),d=Cartesian3.dot(i,C),u=Cartesian3.dot(n,n),f=Cartesian3.dot(n,C)}else{if(Cartesian2.equalsEpsilon(a,e,CesiumMath.EPSILON14))return Cartesian3.clone(Cartesian3.UNIT_X,s);if(Cartesian2.equalsEpsilon(a,t,CesiumMath.EPSILON14))return Cartesian3.clone(Cartesian3.UNIT_Y,s);if(Cartesian2.equalsEpsilon(a,r,CesiumMath.EPSILON14))return Cartesian3.clone(Cartesian3.UNIT_Z,s);i=Cartesian2.subtract(t,e,scratchCartesian1),n=Cartesian2.subtract(r,e,scratchCartesian2),C=Cartesian2.subtract(a,e,scratchCartesian3),c=Cartesian2.dot(i,i),o=Cartesian2.dot(i,n),d=Cartesian2.dot(i,C),u=Cartesian2.dot(n,n),f=Cartesian2.dot(n,C)}s.y=u*d-o*f,s.z=c*f-o*d;var h=c*u-o*o;if(0!==h)return s.y/=h,s.z/=h,s.x=1-s.y-s.z,s}export default barycentricCoordinates;