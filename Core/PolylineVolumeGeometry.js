import arrayRemoveDuplicates from"./arrayRemoveDuplicates.js";import BoundingRectangle from"./BoundingRectangle.js";import BoundingSphere from"./BoundingSphere.js";import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import ComponentDatatype from"./ComponentDatatype.js";import CornerType from"./CornerType.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import Ellipsoid from"./Ellipsoid.js";import Geometry from"./Geometry.js";import GeometryAttribute from"./GeometryAttribute.js";import GeometryAttributes from"./GeometryAttributes.js";import GeometryPipeline from"./GeometryPipeline.js";import IndexDatatype from"./IndexDatatype.js";import CesiumMath from"./Math.js";import oneTimeWarning from"./oneTimeWarning.js";import PolygonPipeline from"./PolygonPipeline.js";import PolylineVolumeGeometryLibrary from"./PolylineVolumeGeometryLibrary.js";import PrimitiveType from"./PrimitiveType.js";import VertexFormat from"./VertexFormat.js";import WindingOrder from"./WindingOrder.js";function computeAttributes(e,t,r,o){var i=new GeometryAttributes;o.position&&(i.position=new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var n,a,l,p,s,m,u=t.length,y=e.length/3,d=(y-2*u)/(2*u),c=PolygonPipeline.triangulate(t),h=(d-1)*u*6+2*c.length,g=IndexDatatype.createTypedArray(y,h),f=2*u,v=0;for(n=0;n<d-1;n++){for(a=0;a<u-1;a++)m=(l=2*a+n*u*2)+f,s=(p=l+1)+f,g[v++]=p,g[v++]=l,g[v++]=s,g[v++]=s,g[v++]=l,g[v++]=m;s=(p=1+(l=2*u-2+n*u*2))+f,m=l+f,g[v++]=p,g[v++]=l,g[v++]=s,g[v++]=s,g[v++]=l,g[v++]=m}if(o.st||o.tangent||o.bitangent){var P,E,V=new Float32Array(2*y),b=1/(d-1),G=1/r.height,_=r.height/2,C=0;for(n=0;n<d;n++){for(P=n*b,E=G*(t[0].y+_),V[C++]=P,V[C++]=E,a=1;a<u;a++)E=G*(t[a].y+_),V[C++]=P,V[C++]=E,V[C++]=P,V[C++]=E;E=G*(t[0].y+_),V[C++]=P,V[C++]=E}for(a=0;a<u;a++)P=0,E=G*(t[a].y+_),V[C++]=P,V[C++]=E;for(a=0;a<u;a++)P=(d-1)*b,E=G*(t[a].y+_),V[C++]=P,V[C++]=E;i.st=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(V)})}var D=y-2*u;for(n=0;n<c.length;n+=3){var F=c[n]+D,x=c[n+1]+D,k=c[n+2]+D;g[v++]=F,g[v++]=x,g[v++]=k,g[v++]=k+u,g[v++]=x+u,g[v++]=F+u}var T=new Geometry({attributes:i,indices:g,boundingSphere:BoundingSphere.fromVertices(e),primitiveType:PrimitiveType.TRIANGLES});if(o.normal&&(T=GeometryPipeline.computeNormal(T)),o.tangent||o.bitangent){try{T=GeometryPipeline.computeTangentAndBitangent(T)}catch(e){oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}o.tangent||(T.attributes.tangent=void 0),o.bitangent||(T.attributes.bitangent=void 0),o.st||(T.attributes.st=void 0)}return T}function PolylineVolumeGeometry(e){var t=(e=defaultValue(e,defaultValue.EMPTY_OBJECT)).polylinePositions,r=e.shapePositions;if(!defined(t))throw new DeveloperError("options.polylinePositions is required.");if(!defined(r))throw new DeveloperError("options.shapePositions is required.");this._positions=t,this._shape=r,this._ellipsoid=Ellipsoid.clone(defaultValue(e.ellipsoid,Ellipsoid.WGS84)),this._cornerType=defaultValue(e.cornerType,CornerType.ROUNDED),this._vertexFormat=VertexFormat.clone(defaultValue(e.vertexFormat,VertexFormat.DEFAULT)),this._granularity=defaultValue(e.granularity,CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var o=1+t.length*Cartesian3.packedLength;o+=1+r.length*Cartesian2.packedLength,this.packedLength=o+Ellipsoid.packedLength+VertexFormat.packedLength+2}PolylineVolumeGeometry.pack=function(e,t,r){if(!defined(e))throw new DeveloperError("value is required");if(!defined(t))throw new DeveloperError("array is required");var o;r=defaultValue(r,0);var i=e._positions,n=i.length;for(t[r++]=n,o=0;o<n;++o,r+=Cartesian3.packedLength)Cartesian3.pack(i[o],t,r);var a=e._shape;for(n=a.length,t[r++]=n,o=0;o<n;++o,r+=Cartesian2.packedLength)Cartesian2.pack(a[o],t,r);return Ellipsoid.pack(e._ellipsoid,t,r),r+=Ellipsoid.packedLength,VertexFormat.pack(e._vertexFormat,t,r),r+=VertexFormat.packedLength,t[r++]=e._cornerType,t[r]=e._granularity,t};var scratchEllipsoid=Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),scratchVertexFormat=new VertexFormat,scratchOptions={polylinePositions:void 0,shapePositions:void 0,ellipsoid:scratchEllipsoid,vertexFormat:scratchVertexFormat,cornerType:void 0,granularity:void 0};PolylineVolumeGeometry.unpack=function(e,t,r){if(!defined(e))throw new DeveloperError("array is required");var o;t=defaultValue(t,0);var i=e[t++],n=new Array(i);for(o=0;o<i;++o,t+=Cartesian3.packedLength)n[o]=Cartesian3.unpack(e,t);i=e[t++];var a=new Array(i);for(o=0;o<i;++o,t+=Cartesian2.packedLength)a[o]=Cartesian2.unpack(e,t);var l=Ellipsoid.unpack(e,t,scratchEllipsoid);t+=Ellipsoid.packedLength;var p=VertexFormat.unpack(e,t,scratchVertexFormat);t+=VertexFormat.packedLength;var s=e[t++],m=e[t];return defined(r)?(r._positions=n,r._shape=a,r._ellipsoid=Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=VertexFormat.clone(p,r._vertexFormat),r._cornerType=s,r._granularity=m,r):(scratchOptions.polylinePositions=n,scratchOptions.shapePositions=a,scratchOptions.cornerType=s,scratchOptions.granularity=m,new PolylineVolumeGeometry(scratchOptions))};var brScratch=new BoundingRectangle;PolylineVolumeGeometry.createGeometry=function(e){var t=e._positions,r=arrayRemoveDuplicates(t,Cartesian3.equalsEpsilon),o=e._shape;if(o=PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(o),!(r.length<2||o.length<3)){PolygonPipeline.computeWindingOrder2D(o)===WindingOrder.CLOCKWISE&&o.reverse();var i=BoundingRectangle.fromPoints(o,brScratch);return computeAttributes(PolylineVolumeGeometryLibrary.computePositions(r,o,i,e,!0),o,i,e._vertexFormat)}};export default PolylineVolumeGeometry;