import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import Check from"./Check.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import GeometryType from"./GeometryType.js";import Matrix2 from"./Matrix2.js";import Matrix3 from"./Matrix3.js";import Matrix4 from"./Matrix4.js";import PrimitiveType from"./PrimitiveType.js";import Quaternion from"./Quaternion.js";import Rectangle from"./Rectangle.js";import Transforms from"./Transforms.js";function Geometry(t){t=defaultValue(t,defaultValue.EMPTY_OBJECT),Check.typeOf.object("options.attributes",t.attributes),this.attributes=t.attributes,this.indices=t.indices,this.primitiveType=defaultValue(t.primitiveType,PrimitiveType.TRIANGLES),this.boundingSphere=t.boundingSphere,this.geometryType=defaultValue(t.geometryType,GeometryType.NONE),this.boundingSphereCV=t.boundingSphereCV,this.offsetAttribute=t.offsetAttribute}Geometry.computeNumberOfVertices=function(t){Check.typeOf.object("geometry",t);var e=-1;for(var r in t.attributes)if(t.attributes.hasOwnProperty(r)&&defined(t.attributes[r])&&defined(t.attributes[r].values)){var a=t.attributes[r],i=a.values.length/a.componentsPerAttribute;if(e!==i&&-1!==e)throw new DeveloperError("All attribute lists must have the same number of attributes.");e=i}return e};var rectangleCenterScratch=new Cartographic,enuCenterScratch=new Cartesian3,fixedFrameToEnuScratch=new Matrix4,boundingRectanglePointsCartographicScratch=[new Cartographic,new Cartographic,new Cartographic],boundingRectanglePointsEnuScratch=[new Cartesian2,new Cartesian2,new Cartesian2],points2DScratch=[new Cartesian2,new Cartesian2,new Cartesian2],pointEnuScratch=new Cartesian3,enuRotationScratch=new Quaternion,enuRotationMatrixScratch=new Matrix4,rotation2DScratch=new Matrix2;Geometry._textureCoordinateRotationPoints=function(t,e,r,a){var i,n=Rectangle.center(a,rectangleCenterScratch),o=Cartographic.toCartesian(n,r,enuCenterScratch),s=Transforms.eastNorthUpToFixedFrame(o,r,fixedFrameToEnuScratch),c=Matrix4.inverse(s,fixedFrameToEnuScratch),u=boundingRectanglePointsEnuScratch,m=boundingRectanglePointsCartographicScratch;m[0].longitude=a.west,m[0].latitude=a.south,m[1].longitude=a.west,m[1].latitude=a.north,m[2].longitude=a.east,m[2].latitude=a.south;var p=pointEnuScratch;for(i=0;i<3;i++)Cartographic.toCartesian(m[i],r,p),p=Matrix4.multiplyByPointAsVector(c,p,p),u[i].x=p.x,u[i].y=p.y;var h=Quaternion.fromAxisAngle(Cartesian3.UNIT_Z,-e,enuRotationScratch),f=Matrix3.fromQuaternion(h,enuRotationMatrixScratch),l=t.length,y=Number.POSITIVE_INFINITY,C=Number.POSITIVE_INFINITY,x=Number.NEGATIVE_INFINITY,d=Number.NEGATIVE_INFINITY;for(i=0;i<l;i++)p=Matrix4.multiplyByPointAsVector(c,t[i],p),p=Matrix3.multiplyByVector(f,p,p),y=Math.min(y,p.x),C=Math.min(C,p.y),x=Math.max(x,p.x),d=Math.max(d,p.y);var g=Matrix2.fromRotation(e,rotation2DScratch),b=points2DScratch;b[0].x=y,b[0].y=C,b[1].x=y,b[1].y=d,b[2].x=x,b[2].y=C;var T=u[0],S=u[2].x-T.x,v=u[1].y-T.y;for(i=0;i<3;i++){var M=b[i];Matrix2.multiplyByVector(g,M,M),M.x=(M.x-T.x)/S,M.y=(M.y-T.y)/v}var w=b[0],E=b[1],I=b[2],N=new Array(6);return Cartesian2.pack(w,N),Cartesian2.pack(E,N,2),Cartesian2.pack(I,N,4),N};export default Geometry;