import Check from"./Check.js";import CompressedTextureBuffer from"./CompressedTextureBuffer.js";import defined from"./defined.js";import TaskProcessor from"./TaskProcessor.js";function KTX2Transcoder(){}function makeReadyPromise(){var r=KTX2Transcoder._transcodeTaskProcessor.initWebAssemblyModule({modulePath:"ThirdParty/Workers/basis_transcoder.js",wasmBinaryFile:"ThirdParty/basis_transcoder.wasm"}).then((function(){return KTX2Transcoder._transcodeTaskProcessor}));KTX2Transcoder._readyPromise=r}KTX2Transcoder._transcodeTaskProcessor=new TaskProcessor("transcodeKTX2",Number.POSITIVE_INFINITY),KTX2Transcoder._readyPromise=void 0,KTX2Transcoder.transcode=function(r,e){return Check.defined("supportedTargetFormats",e),defined(KTX2Transcoder._readyPromise)||makeReadyPromise(),KTX2Transcoder._readyPromise.then((function(s){var o;if(r instanceof ArrayBuffer){var a=new Uint8Array(r);return o={supportedTargetFormats:e,ktx2Buffer:a},s.scheduleTask(o,[r])}return o={supportedTargetFormats:e,ktx2Buffer:r},s.scheduleTask(o,[r.buffer])})).then((function(r){var e,s=r.length,o=Object.keys(r[0]),a=o.length;for(e=0;e<s;e++)for(var t=r[e],n=0;n<a;n++){var d=t[o[n]];t[o[n]]=new CompressedTextureBuffer(d.internalFormat,d.datatype,d.width,d.height,d.levelBuffer)}if(1===a){for(e=0;e<s;++e)r[e]=r[e][o[0]];1===s&&(r=r[0])}return r})).otherwise((function(r){throw r}))};export default KTX2Transcoder;