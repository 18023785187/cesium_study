import BoundingSphere from"./BoundingSphere.js";import Cartesian3 from"./Cartesian3.js";import ComponentDatatype from"./ComponentDatatype.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import Ellipsoid from"./Ellipsoid.js";import Geometry from"./Geometry.js";import GeometryAttribute from"./GeometryAttribute.js";import GeometryAttributes from"./GeometryAttributes.js";import IndexDatatype from"./IndexDatatype.js";import CesiumMath from"./Math.js";import PrimitiveType from"./PrimitiveType.js";import VertexFormat from"./VertexFormat.js";import WallGeometryLibrary from"./WallGeometryLibrary.js";var scratchCartesian3Position1=new Cartesian3,scratchCartesian3Position2=new Cartesian3,scratchCartesian3Position4=new Cartesian3,scratchCartesian3Position5=new Cartesian3,scratchBitangent=new Cartesian3,scratchTangent=new Cartesian3,scratchNormal=new Cartesian3;function WallGeometry(e){var t=(e=defaultValue(e,defaultValue.EMPTY_OBJECT)).positions,r=e.maximumHeights,i=e.minimumHeights;if(!defined(t))throw new DeveloperError("options.positions is required.");if(defined(r)&&r.length!==t.length)throw new DeveloperError("options.positions and options.maximumHeights must have the same length.");if(defined(i)&&i.length!==t.length)throw new DeveloperError("options.positions and options.minimumHeights must have the same length.");var a=defaultValue(e.vertexFormat,VertexFormat.DEFAULT),o=defaultValue(e.granularity,CesiumMath.RADIANS_PER_DEGREE),n=defaultValue(e.ellipsoid,Ellipsoid.WGS84);this._positions=t,this._minimumHeights=i,this._maximumHeights=r,this._vertexFormat=VertexFormat.clone(a),this._granularity=o,this._ellipsoid=Ellipsoid.clone(n),this._workerName="createWallGeometry";var s=1+t.length*Cartesian3.packedLength+2;defined(i)&&(s+=i.length),defined(r)&&(s+=r.length),this.packedLength=s+Ellipsoid.packedLength+VertexFormat.packedLength+1}WallGeometry.pack=function(e,t,r){if(!defined(e))throw new DeveloperError("value is required");if(!defined(t))throw new DeveloperError("array is required");var i;r=defaultValue(r,0);var a=e._positions,o=a.length;for(t[r++]=o,i=0;i<o;++i,r+=Cartesian3.packedLength)Cartesian3.pack(a[i],t,r);var n=e._minimumHeights;if(o=defined(n)?n.length:0,t[r++]=o,defined(n))for(i=0;i<o;++i)t[r++]=n[i];var s=e._maximumHeights;if(o=defined(s)?s.length:0,t[r++]=o,defined(s))for(i=0;i<o;++i)t[r++]=s[i];return Ellipsoid.pack(e._ellipsoid,t,r),r+=Ellipsoid.packedLength,VertexFormat.pack(e._vertexFormat,t,r),t[r+=VertexFormat.packedLength]=e._granularity,t};var scratchEllipsoid=Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),scratchVertexFormat=new VertexFormat,scratchOptions={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:scratchEllipsoid,vertexFormat:scratchVertexFormat,granularity:void 0};WallGeometry.unpack=function(e,t,r){if(!defined(e))throw new DeveloperError("array is required");var i;t=defaultValue(t,0);var a,o,n=e[t++],s=new Array(n);for(i=0;i<n;++i,t+=Cartesian3.packedLength)s[i]=Cartesian3.unpack(e,t);if((n=e[t++])>0)for(a=new Array(n),i=0;i<n;++i)a[i]=e[t++];if((n=e[t++])>0)for(o=new Array(n),i=0;i<n;++i)o[i]=e[t++];var m=Ellipsoid.unpack(e,t,scratchEllipsoid);t+=Ellipsoid.packedLength;var l=VertexFormat.unpack(e,t,scratchVertexFormat),p=e[t+=VertexFormat.packedLength];return defined(r)?(r._positions=s,r._minimumHeights=a,r._maximumHeights=o,r._ellipsoid=Ellipsoid.clone(m,r._ellipsoid),r._vertexFormat=VertexFormat.clone(l,r._vertexFormat),r._granularity=p,r):(scratchOptions.positions=s,scratchOptions.minimumHeights=a,scratchOptions.maximumHeights=o,scratchOptions.granularity=p,new WallGeometry(scratchOptions))},WallGeometry.fromConstantHeights=function(e){var t,r,i=(e=defaultValue(e,defaultValue.EMPTY_OBJECT)).positions;if(!defined(i))throw new DeveloperError("options.positions is required.");var a=e.minimumHeight,o=e.maximumHeight,n=defined(a),s=defined(o);if(n||s){var m=i.length;t=n?new Array(m):void 0,r=s?new Array(m):void 0;for(var l=0;l<m;++l)n&&(t[l]=a),s&&(r[l]=o)}return new WallGeometry({positions:i,maximumHeights:r,minimumHeights:t,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},WallGeometry.createGeometry=function(e){var t=e._positions,r=e._minimumHeights,i=e._maximumHeights,a=e._vertexFormat,o=e._granularity,n=e._ellipsoid,s=WallGeometryLibrary.computePositions(n,t,i,r,o,!0);if(defined(s)){var m,l=s.bottomPositions,p=s.topPositions,c=s.numCorners,d=p.length,u=2*d,h=a.position?new Float64Array(u):void 0,f=a.normal?new Float32Array(u):void 0,y=a.tangent?new Float32Array(u):void 0,g=a.bitangent?new Float32Array(u):void 0,v=a.st?new Float32Array(u/3*2):void 0,C=0,x=0,w=0,E=0,A=0,F=scratchNormal,_=scratchTangent,b=scratchBitangent,P=!0,G=0,D=1/((d/=3)-c-1);for(m=0;m<d;++m){var V=3*m,H=Cartesian3.fromArray(p,V,scratchCartesian3Position1),L=Cartesian3.fromArray(l,V,scratchCartesian3Position2);if(a.position&&(h[C++]=L.x,h[C++]=L.y,h[C++]=L.z,h[C++]=H.x,h[C++]=H.y,h[C++]=H.z),a.st&&(v[A++]=G,v[A++]=0,v[A++]=G,v[A++]=1),a.normal||a.tangent||a.bitangent){var k=Cartesian3.clone(Cartesian3.ZERO,scratchCartesian3Position5),T=Cartesian3.subtract(H,n.geodeticSurfaceNormal(H,scratchCartesian3Position2),scratchCartesian3Position2);if(m+1<d&&(k=Cartesian3.fromArray(p,V+3,scratchCartesian3Position5)),P){var O=Cartesian3.subtract(k,H,scratchCartesian3Position4),j=Cartesian3.subtract(T,H,scratchCartesian3Position1);F=Cartesian3.normalize(Cartesian3.cross(j,O,F),F),P=!1}Cartesian3.equalsEpsilon(H,k,CesiumMath.EPSILON10)?P=!0:(G+=D,a.tangent&&(_=Cartesian3.normalize(Cartesian3.subtract(k,H,_),_)),a.bitangent&&(b=Cartesian3.normalize(Cartesian3.cross(F,_,b),b))),a.normal&&(f[x++]=F.x,f[x++]=F.y,f[x++]=F.z,f[x++]=F.x,f[x++]=F.y,f[x++]=F.z),a.tangent&&(y[E++]=_.x,y[E++]=_.y,y[E++]=_.z,y[E++]=_.x,y[E++]=_.y,y[E++]=_.z),a.bitangent&&(g[w++]=b.x,g[w++]=b.y,g[w++]=b.z,g[w++]=b.x,g[w++]=b.y,g[w++]=b.z)}}var W=new GeometryAttributes;a.position&&(W.position=new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:h})),a.normal&&(W.normal=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f})),a.tangent&&(W.tangent=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),a.bitangent&&(W.bitangent=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:g})),a.st&&(W.st=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:2,values:v}));var z=u/3;u-=6*(c+1);var S=IndexDatatype.createTypedArray(z,u),N=0;for(m=0;m<z-2;m+=2){var B=m,I=m+2,q=Cartesian3.fromArray(h,3*B,scratchCartesian3Position1),M=Cartesian3.fromArray(h,3*I,scratchCartesian3Position2);if(!Cartesian3.equalsEpsilon(q,M,CesiumMath.EPSILON10)){var R=m+1,U=m+3;S[N++]=R,S[N++]=B,S[N++]=U,S[N++]=U,S[N++]=B,S[N++]=I}}return new Geometry({attributes:W,indices:S,primitiveType:PrimitiveType.TRIANGLES,boundingSphere:new BoundingSphere.fromVertices(h)})}};export default WallGeometry;