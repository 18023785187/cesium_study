import Cartesian3 from"./Cartesian3.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";var TridiagonalSystemSolver={solve:function(e,r,a,t){if(!(defined(e)&&e instanceof Array))throw new DeveloperError("The array lower is required.");if(!(defined(r)&&r instanceof Array))throw new DeveloperError("The array diagonal is required.");if(!(defined(a)&&a instanceof Array))throw new DeveloperError("The array upper is required.");if(!(defined(t)&&t instanceof Array))throw new DeveloperError("The array right is required.");if(r.length!==t.length)throw new DeveloperError("diagonal and right must have the same lengths.");if(e.length!==a.length)throw new DeveloperError("lower and upper must have the same lengths.");if(e.length!==r.length-1)throw new DeveloperError("lower and upper must be one less than the length of diagonal.");var n,i,l=new Array(a.length),o=new Array(t.length),s=new Array(t.length);for(n=0;n<o.length;n++)o[n]=new Cartesian3,s[n]=new Cartesian3;for(l[0]=a[0]/r[0],o[0]=Cartesian3.multiplyByScalar(t[0],1/r[0],o[0]),n=1;n<l.length;++n)i=1/(r[n]-l[n-1]*e[n-1]),l[n]=a[n]*i,o[n]=Cartesian3.subtract(t[n],Cartesian3.multiplyByScalar(o[n-1],e[n-1],o[n]),o[n]),o[n]=Cartesian3.multiplyByScalar(o[n],i,o[n]);for(i=1/(r[n]-l[n-1]*e[n-1]),o[n]=Cartesian3.subtract(t[n],Cartesian3.multiplyByScalar(o[n-1],e[n-1],o[n]),o[n]),o[n]=Cartesian3.multiplyByScalar(o[n],i,o[n]),s[s.length-1]=o[o.length-1],n=s.length-2;n>=0;--n)s[n]=Cartesian3.subtract(o[n],Cartesian3.multiplyByScalar(s[n+1],l[n],s[n]),s[n]);return s}};export default TridiagonalSystemSolver;