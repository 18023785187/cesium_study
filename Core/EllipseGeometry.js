import arrayFill from"./arrayFill.js";import BoundingSphere from"./BoundingSphere.js";import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import Check from"./Check.js";import ComponentDatatype from"./ComponentDatatype.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import EllipseGeometryLibrary from"./EllipseGeometryLibrary.js";import Ellipsoid from"./Ellipsoid.js";import GeographicProjection from"./GeographicProjection.js";import Geometry from"./Geometry.js";import GeometryAttribute from"./GeometryAttribute.js";import GeometryAttributes from"./GeometryAttributes.js";import GeometryInstance from"./GeometryInstance.js";import GeometryOffsetAttribute from"./GeometryOffsetAttribute.js";import GeometryPipeline from"./GeometryPipeline.js";import IndexDatatype from"./IndexDatatype.js";import CesiumMath from"./Math.js";import Matrix3 from"./Matrix3.js";import PrimitiveType from"./PrimitiveType.js";import Quaternion from"./Quaternion.js";import Rectangle from"./Rectangle.js";import VertexFormat from"./VertexFormat.js";var scratchCartesian1=new Cartesian3,scratchCartesian2=new Cartesian3,scratchCartesian3=new Cartesian3,scratchCartesian4=new Cartesian3,texCoordScratch=new Cartesian2,textureMatrixScratch=new Matrix3,tangentMatrixScratch=new Matrix3,quaternionScratch=new Quaternion,scratchNormal=new Cartesian3,scratchTangent=new Cartesian3,scratchBitangent=new Cartesian3,scratchCartographic=new Cartographic,projectedCenterScratch=new Cartesian3,scratchMinTexCoord=new Cartesian2,scratchMaxTexCoord=new Cartesian2;function computeTopBottomAttributes(t,e,r){var a=e.vertexFormat,o=e.center,i=e.semiMajorAxis,n=e.semiMinorAxis,s=e.ellipsoid,c=e.stRotation,m=r?t.length/3*2:t.length/3,l=e.shadowVolume,u=a.st?new Float32Array(2*m):void 0,p=a.normal?new Float32Array(3*m):void 0,h=a.tangent?new Float32Array(3*m):void 0,d=a.bitangent?new Float32Array(3*m):void 0,y=l?new Float32Array(3*m):void 0,x=0,f=scratchNormal,C=scratchTangent,g=scratchBitangent,A=new GeographicProjection(s),b=A.project(s.cartesianToCartographic(o,scratchCartographic),projectedCenterScratch),v=s.scaleToGeodeticSurface(o,scratchCartesian1);s.geodeticSurfaceNormal(v,v);var _=textureMatrixScratch,E=tangentMatrixScratch;if(0!==c){var M=Quaternion.fromAxisAngle(v,c,quaternionScratch);_=Matrix3.fromQuaternion(M,_),M=Quaternion.fromAxisAngle(v,-c,quaternionScratch),E=Matrix3.fromQuaternion(M,E)}else _=Matrix3.clone(Matrix3.IDENTITY,_),E=Matrix3.clone(Matrix3.IDENTITY,E);for(var S=Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,scratchMinTexCoord),w=Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,scratchMaxTexCoord),G=t.length,T=r?G:0,I=T/3*2,P=0;P<G;P+=3){var N=P+1,F=P+2,j=Cartesian3.fromArray(t,P,scratchCartesian1);if(a.st){var V=Matrix3.multiplyByVector(_,j,scratchCartesian2),O=A.project(s.cartesianToCartographic(V,scratchCartographic),scratchCartesian3);Cartesian3.subtract(O,b,O),texCoordScratch.x=(O.x+i)/(2*i),texCoordScratch.y=(O.y+n)/(2*n),S.x=Math.min(texCoordScratch.x,S.x),S.y=Math.min(texCoordScratch.y,S.y),w.x=Math.max(texCoordScratch.x,w.x),w.y=Math.max(texCoordScratch.y,w.y),r&&(u[x+I]=texCoordScratch.x,u[x+1+I]=texCoordScratch.y),u[x++]=texCoordScratch.x,u[x++]=texCoordScratch.y}(a.normal||a.tangent||a.bitangent||l)&&(f=s.geodeticSurfaceNormal(j,f),l&&(y[P+T]=-f.x,y[N+T]=-f.y,y[F+T]=-f.z),(a.normal||a.tangent||a.bitangent)&&((a.tangent||a.bitangent)&&(C=Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z,f,C),C),Matrix3.multiplyByVector(E,C,C)),a.normal&&(p[P]=f.x,p[N]=f.y,p[F]=f.z,r&&(p[P+T]=-f.x,p[N+T]=-f.y,p[F+T]=-f.z)),a.tangent&&(h[P]=C.x,h[N]=C.y,h[F]=C.z,r&&(h[P+T]=-C.x,h[N+T]=-C.y,h[F+T]=-C.z)),a.bitangent&&(g=Cartesian3.normalize(Cartesian3.cross(f,C,g),g),d[P]=g.x,d[N]=g.y,d[F]=g.z,r&&(d[P+T]=g.x,d[N+T]=g.y,d[F+T]=g.z))))}if(a.st){G=u.length;for(var D=0;D<G;D+=2)u[D]=(u[D]-S.x)/(w.x-S.x),u[D+1]=(u[D+1]-S.y)/(w.y-S.y)}var R=new GeometryAttributes;if(a.position){var B=EllipseGeometryLibrary.raisePositionsToHeight(t,e,r);R.position=new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:B})}if(a.st&&(R.st=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:2,values:u})),a.normal&&(R.normal=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:p})),a.tangent&&(R.tangent=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:h})),a.bitangent&&(R.bitangent=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:d})),l&&(R.extrudeDirection=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),r&&defined(e.offsetAttribute)){var L=new Uint8Array(m);if(e.offsetAttribute===GeometryOffsetAttribute.TOP)L=arrayFill(L,1,0,m/2);else{var k=e.offsetAttribute===GeometryOffsetAttribute.NONE?0:1;L=arrayFill(L,k)}R.applyOffset=new GeometryAttribute({componentDatatype:ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:L})}return R}function topIndices(t){var e,r,a,o,i,n=new Array(t*(t+1)*12-6),s=0;for(e=0,a=1,o=0;o<3;o++)n[s++]=a++,n[s++]=e,n[s++]=a;for(o=2;o<t+1;++o){for(a=o*(o+1)-1,e=(o-1)*o-1,n[s++]=a++,n[s++]=e,n[s++]=a,r=2*o,i=0;i<r-1;++i)n[s++]=a,n[s++]=e++,n[s++]=e,n[s++]=a++,n[s++]=e,n[s++]=a;n[s++]=a++,n[s++]=e,n[s++]=a}for(r=2*t,++a,++e,o=0;o<r-1;++o)n[s++]=a,n[s++]=e++,n[s++]=e,n[s++]=a++,n[s++]=e,n[s++]=a;for(n[s++]=a,n[s++]=e++,n[s++]=e,n[s++]=a++,n[s++]=e++,n[s++]=e,++e,o=t-1;o>1;--o){for(n[s++]=e++,n[s++]=e,n[s++]=a,r=2*o,i=0;i<r-1;++i)n[s++]=a,n[s++]=e++,n[s++]=e,n[s++]=a++,n[s++]=e,n[s++]=a;n[s++]=e++,n[s++]=e++,n[s++]=a++}for(o=0;o<3;o++)n[s++]=e++,n[s++]=e,n[s++]=a;return n}var boundingSphereCenter=new Cartesian3;function computeEllipse(t){var e=t.center;boundingSphereCenter=Cartesian3.multiplyByScalar(t.ellipsoid.geodeticSurfaceNormal(e,boundingSphereCenter),t.height,boundingSphereCenter),boundingSphereCenter=Cartesian3.add(e,boundingSphereCenter,boundingSphereCenter);var r=new BoundingSphere(boundingSphereCenter,t.semiMajorAxis),a=EllipseGeometryLibrary.computeEllipsePositions(t,!0,!1),o=a.positions,i=a.numPts,n=computeTopBottomAttributes(o,t,!1),s=topIndices(i);return{boundingSphere:r,attributes:n,indices:s=IndexDatatype.createTypedArray(o.length/3,s)}}function computeWallAttributes(t,e){var r=e.vertexFormat,a=e.center,o=e.semiMajorAxis,i=e.semiMinorAxis,n=e.ellipsoid,s=e.height,c=e.extrudedHeight,m=e.stRotation,l=t.length/3*2,u=new Float64Array(3*l),p=r.st?new Float32Array(2*l):void 0,h=r.normal?new Float32Array(3*l):void 0,d=r.tangent?new Float32Array(3*l):void 0,y=r.bitangent?new Float32Array(3*l):void 0,x=e.shadowVolume,f=x?new Float32Array(3*l):void 0,C=0,g=scratchNormal,A=scratchTangent,b=scratchBitangent,v=new GeographicProjection(n),_=v.project(n.cartesianToCartographic(a,scratchCartographic),projectedCenterScratch),E=n.scaleToGeodeticSurface(a,scratchCartesian1);n.geodeticSurfaceNormal(E,E);for(var M=Quaternion.fromAxisAngle(E,m,quaternionScratch),S=Matrix3.fromQuaternion(M,textureMatrixScratch),w=Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,scratchMinTexCoord),G=Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,scratchMaxTexCoord),T=t.length,I=T/3*2,P=0;P<T;P+=3){var N,F=P+1,j=P+2,V=Cartesian3.fromArray(t,P,scratchCartesian1);if(r.st){var O=Matrix3.multiplyByVector(S,V,scratchCartesian2),D=v.project(n.cartesianToCartographic(O,scratchCartographic),scratchCartesian3);Cartesian3.subtract(D,_,D),texCoordScratch.x=(D.x+o)/(2*o),texCoordScratch.y=(D.y+i)/(2*i),w.x=Math.min(texCoordScratch.x,w.x),w.y=Math.min(texCoordScratch.y,w.y),G.x=Math.max(texCoordScratch.x,G.x),G.y=Math.max(texCoordScratch.y,G.y),p[C+I]=texCoordScratch.x,p[C+1+I]=texCoordScratch.y,p[C++]=texCoordScratch.x,p[C++]=texCoordScratch.y}V=n.scaleToGeodeticSurface(V,V),N=Cartesian3.clone(V,scratchCartesian2),g=n.geodeticSurfaceNormal(V,g),x&&(f[P+T]=-g.x,f[F+T]=-g.y,f[j+T]=-g.z);var R=Cartesian3.multiplyByScalar(g,s,scratchCartesian4);if(V=Cartesian3.add(V,R,V),R=Cartesian3.multiplyByScalar(g,c,R),N=Cartesian3.add(N,R,N),r.position&&(u[P+T]=N.x,u[F+T]=N.y,u[j+T]=N.z,u[P]=V.x,u[F]=V.y,u[j]=V.z),r.normal||r.tangent||r.bitangent){b=Cartesian3.clone(g,b);var B=Cartesian3.fromArray(t,(P+3)%T,scratchCartesian4);Cartesian3.subtract(B,V,B);var L=Cartesian3.subtract(N,V,scratchCartesian3);g=Cartesian3.normalize(Cartesian3.cross(L,B,g),g),r.normal&&(h[P]=g.x,h[F]=g.y,h[j]=g.z,h[P+T]=g.x,h[F+T]=g.y,h[j+T]=g.z),r.tangent&&(A=Cartesian3.normalize(Cartesian3.cross(b,g,A),A),d[P]=A.x,d[F]=A.y,d[j]=A.z,d[P+T]=A.x,d[P+1+T]=A.y,d[P+2+T]=A.z),r.bitangent&&(y[P]=b.x,y[F]=b.y,y[j]=b.z,y[P+T]=b.x,y[F+T]=b.y,y[j+T]=b.z)}}if(r.st){T=p.length;for(var k=0;k<T;k+=2)p[k]=(p[k]-w.x)/(G.x-w.x),p[k+1]=(p[k+1]-w.y)/(G.y-w.y)}var z=new GeometryAttributes;if(r.position&&(z.position=new GeometryAttribute({componentDatatype:ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:u})),r.st&&(z.st=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:2,values:p})),r.normal&&(z.normal=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:h})),r.tangent&&(z.tangent=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:d})),r.bitangent&&(z.bitangent=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),x&&(z.extrudeDirection=new GeometryAttribute({componentDatatype:ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f})),defined(e.offsetAttribute)){var Y=new Uint8Array(l);if(e.offsetAttribute===GeometryOffsetAttribute.TOP)Y=arrayFill(Y,1,0,l/2);else{var H=e.offsetAttribute===GeometryOffsetAttribute.NONE?0:1;Y=arrayFill(Y,H)}z.applyOffset=new GeometryAttribute({componentDatatype:ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:Y})}return z}function computeWallIndices(t){for(var e=t.length/3,r=IndexDatatype.createTypedArray(e,6*e),a=0,o=0;o<e;o++){var i=o,n=o+e,s=(i+1)%e,c=s+e;r[a++]=i,r[a++]=n,r[a++]=s,r[a++]=s,r[a++]=n,r[a++]=c}return r}var topBoundingSphere=new BoundingSphere,bottomBoundingSphere=new BoundingSphere;function computeExtrudedEllipse(t){var e=t.center,r=t.ellipsoid,a=t.semiMajorAxis,o=Cartesian3.multiplyByScalar(r.geodeticSurfaceNormal(e,scratchCartesian1),t.height,scratchCartesian1);topBoundingSphere.center=Cartesian3.add(e,o,topBoundingSphere.center),topBoundingSphere.radius=a,o=Cartesian3.multiplyByScalar(r.geodeticSurfaceNormal(e,o),t.extrudedHeight,o),bottomBoundingSphere.center=Cartesian3.add(e,o,bottomBoundingSphere.center),bottomBoundingSphere.radius=a;var i=EllipseGeometryLibrary.computeEllipsePositions(t,!0,!0),n=i.positions,s=i.numPts,c=i.outerPositions,m=BoundingSphere.union(topBoundingSphere,bottomBoundingSphere),l=computeTopBottomAttributes(n,t,!0),u=topIndices(s),p=u.length;u.length=2*p;for(var h=n.length/3,d=0;d<p;d+=3)u[d+p]=u[d+2]+h,u[d+1+p]=u[d+1]+h,u[d+2+p]=u[d]+h;var y=IndexDatatype.createTypedArray(2*h/3,u),x=new Geometry({attributes:l,indices:y,primitiveType:PrimitiveType.TRIANGLES}),f=computeWallAttributes(c,t);u=computeWallIndices(c);var C=IndexDatatype.createTypedArray(2*c.length/3,u),g=new Geometry({attributes:f,indices:C,primitiveType:PrimitiveType.TRIANGLES}),A=GeometryPipeline.combineInstances([new GeometryInstance({geometry:x}),new GeometryInstance({geometry:g})]);return{boundingSphere:m,attributes:A[0].attributes,indices:A[0].indices}}function computeRectangle(t,e,r,a,o,i,n){for(var s=EllipseGeometryLibrary.computeEllipsePositions({center:t,semiMajorAxis:e,semiMinorAxis:r,rotation:a,granularity:o},!1,!0).outerPositions,c=s.length/3,m=new Array(c),l=0;l<c;++l)m[l]=Cartesian3.fromArray(s,3*l);var u=Rectangle.fromCartesianArray(m,i,n);return u.width>CesiumMath.PI&&(u.north=u.north>0?CesiumMath.PI_OVER_TWO-CesiumMath.EPSILON7:u.north,u.south=u.south<0?CesiumMath.EPSILON7-CesiumMath.PI_OVER_TWO:u.south,u.east=CesiumMath.PI,u.west=-CesiumMath.PI),u}function EllipseGeometry(t){var e=(t=defaultValue(t,defaultValue.EMPTY_OBJECT)).center,r=defaultValue(t.ellipsoid,Ellipsoid.WGS84),a=t.semiMajorAxis,o=t.semiMinorAxis,i=defaultValue(t.granularity,CesiumMath.RADIANS_PER_DEGREE),n=defaultValue(t.vertexFormat,VertexFormat.DEFAULT);if(Check.defined("options.center",e),Check.typeOf.number("options.semiMajorAxis",a),Check.typeOf.number("options.semiMinorAxis",o),a<o)throw new DeveloperError("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(i<=0)throw new DeveloperError("granularity must be greater than zero.");var s=defaultValue(t.height,0),c=defaultValue(t.extrudedHeight,s);this._center=Cartesian3.clone(e),this._semiMajorAxis=a,this._semiMinorAxis=o,this._ellipsoid=Ellipsoid.clone(r),this._rotation=defaultValue(t.rotation,0),this._stRotation=defaultValue(t.stRotation,0),this._height=Math.max(c,s),this._granularity=i,this._vertexFormat=VertexFormat.clone(n),this._extrudedHeight=Math.min(c,s),this._shadowVolume=defaultValue(t.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=t.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0}EllipseGeometry.packedLength=Cartesian3.packedLength+Ellipsoid.packedLength+VertexFormat.packedLength+9,EllipseGeometry.pack=function(t,e,r){return Check.defined("value",t),Check.defined("array",e),r=defaultValue(r,0),Cartesian3.pack(t._center,e,r),r+=Cartesian3.packedLength,Ellipsoid.pack(t._ellipsoid,e,r),r+=Ellipsoid.packedLength,VertexFormat.pack(t._vertexFormat,e,r),r+=VertexFormat.packedLength,e[r++]=t._semiMajorAxis,e[r++]=t._semiMinorAxis,e[r++]=t._rotation,e[r++]=t._stRotation,e[r++]=t._height,e[r++]=t._granularity,e[r++]=t._extrudedHeight,e[r++]=t._shadowVolume?1:0,e[r]=defaultValue(t._offsetAttribute,-1),e};var scratchCenter=new Cartesian3,scratchEllipsoid=new Ellipsoid,scratchVertexFormat=new VertexFormat,scratchOptions={center:scratchCenter,ellipsoid:scratchEllipsoid,vertexFormat:scratchVertexFormat,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};function textureCoordinateRotationPoints(t){var e=-t._stRotation;if(0===e)return[0,0,0,1,1,0];for(var r=EllipseGeometryLibrary.computeEllipsePositions({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,rotation:t._rotation,granularity:t._granularity},!1,!0).outerPositions,a=r.length/3,o=new Array(a),i=0;i<a;++i)o[i]=Cartesian3.fromArray(r,3*i);var n=t._ellipsoid,s=t.rectangle;return Geometry._textureCoordinateRotationPoints(o,e,n,s)}EllipseGeometry.unpack=function(t,e,r){Check.defined("array",t),e=defaultValue(e,0);var a=Cartesian3.unpack(t,e,scratchCenter);e+=Cartesian3.packedLength;var o=Ellipsoid.unpack(t,e,scratchEllipsoid);e+=Ellipsoid.packedLength;var i=VertexFormat.unpack(t,e,scratchVertexFormat);e+=VertexFormat.packedLength;var n=t[e++],s=t[e++],c=t[e++],m=t[e++],l=t[e++],u=t[e++],p=t[e++],h=1===t[e++],d=t[e];return defined(r)?(r._center=Cartesian3.clone(a,r._center),r._ellipsoid=Ellipsoid.clone(o,r._ellipsoid),r._vertexFormat=VertexFormat.clone(i,r._vertexFormat),r._semiMajorAxis=n,r._semiMinorAxis=s,r._rotation=c,r._stRotation=m,r._height=l,r._granularity=u,r._extrudedHeight=p,r._shadowVolume=h,r._offsetAttribute=-1===d?void 0:d,r):(scratchOptions.height=l,scratchOptions.extrudedHeight=p,scratchOptions.granularity=u,scratchOptions.stRotation=m,scratchOptions.rotation=c,scratchOptions.semiMajorAxis=n,scratchOptions.semiMinorAxis=s,scratchOptions.shadowVolume=h,scratchOptions.offsetAttribute=-1===d?void 0:d,new EllipseGeometry(scratchOptions))},EllipseGeometry.computeRectangle=function(t,e){var r=(t=defaultValue(t,defaultValue.EMPTY_OBJECT)).center,a=defaultValue(t.ellipsoid,Ellipsoid.WGS84),o=t.semiMajorAxis,i=t.semiMinorAxis,n=defaultValue(t.granularity,CesiumMath.RADIANS_PER_DEGREE),s=defaultValue(t.rotation,0);if(Check.defined("options.center",r),Check.typeOf.number("options.semiMajorAxis",o),Check.typeOf.number("options.semiMinorAxis",i),o<i)throw new DeveloperError("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(n<=0)throw new DeveloperError("granularity must be greater than zero.");return computeRectangle(r,o,i,s,n,a,e)},EllipseGeometry.createGeometry=function(t){if(!(t._semiMajorAxis<=0||t._semiMinorAxis<=0)){var e=t._height,r=t._extrudedHeight,a=!CesiumMath.equalsEpsilon(e,r,0,CesiumMath.EPSILON2);t._center=t._ellipsoid.scaleToGeodeticSurface(t._center,t._center);var o,i={center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:t._ellipsoid,rotation:t._rotation,height:e,granularity:t._granularity,vertexFormat:t._vertexFormat,stRotation:t._stRotation};if(a)i.extrudedHeight=r,i.shadowVolume=t._shadowVolume,i.offsetAttribute=t._offsetAttribute,o=computeExtrudedEllipse(i);else if(o=computeEllipse(i),defined(t._offsetAttribute)){var n=o.attributes.position.values.length,s=new Uint8Array(n/3),c=t._offsetAttribute===GeometryOffsetAttribute.NONE?0:1;arrayFill(s,c),o.attributes.applyOffset=new GeometryAttribute({componentDatatype:ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:s})}return new Geometry({attributes:o.attributes,indices:o.indices,primitiveType:PrimitiveType.TRIANGLES,boundingSphere:o.boundingSphere,offsetAttribute:t._offsetAttribute})}},EllipseGeometry.createShadowVolume=function(t,e,r){var a=t._granularity,o=t._ellipsoid,i=e(a,o),n=r(a,o);return new EllipseGeometry({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:o,rotation:t._rotation,stRotation:t._stRotation,granularity:a,extrudedHeight:i,height:n,vertexFormat:VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(EllipseGeometry.prototype,{rectangle:{get:function(){return defined(this._rectangle)||(this._rectangle=computeRectangle(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=textureCoordinateRotationPoints(this)),this._textureCoordinateRotationPoints}}});export default EllipseGeometry;