import BoundingSphere from"./BoundingSphere.js";import Cartesian3 from"./Cartesian3.js";import Check from"./Check.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import Ellipsoid from"./Ellipsoid.js";import Rectangle from"./Rectangle.js";function EllipsoidalOccluder(i,e){Check.typeOf.object("ellipsoid",i),this._ellipsoid=i,this._cameraPosition=new Cartesian3,this._cameraPositionInScaledSpace=new Cartesian3,this._distanceToLimbInScaledSpaceSquared=0,defined(e)&&(this.cameraPosition=e)}Object.defineProperties(EllipsoidalOccluder.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},cameraPosition:{get:function(){return this._cameraPosition},set:function(i){var e=this._ellipsoid.transformPositionToScaledSpace(i,this._cameraPositionInScaledSpace),t=Cartesian3.magnitudeSquared(e)-1;Cartesian3.clone(i,this._cameraPosition),this._cameraPositionInScaledSpace=e,this._distanceToLimbInScaledSpaceSquared=t}}});var scratchCartesian=new Cartesian3;EllipsoidalOccluder.prototype.isPointVisible=function(i){return isScaledSpacePointVisible(this._ellipsoid.transformPositionToScaledSpace(i,scratchCartesian),this._cameraPositionInScaledSpace,this._distanceToLimbInScaledSpaceSquared)},EllipsoidalOccluder.prototype.isScaledSpacePointVisible=function(i){return isScaledSpacePointVisible(i,this._cameraPositionInScaledSpace,this._distanceToLimbInScaledSpaceSquared)};var scratchCameraPositionInScaledSpaceShrunk=new Cartesian3;EllipsoidalOccluder.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid=function(i,e){var t,o,a=this._ellipsoid;return defined(e)&&e<0&&a.minimumRadius>-e?((o=scratchCameraPositionInScaledSpaceShrunk).x=this._cameraPosition.x/(a.radii.x+e),o.y=this._cameraPosition.y/(a.radii.y+e),o.z=this._cameraPosition.z/(a.radii.z+e),t=o.x*o.x+o.y*o.y+o.z*o.z-1):(o=this._cameraPositionInScaledSpace,t=this._distanceToLimbInScaledSpaceSquared),isScaledSpacePointVisible(i,o,t)},EllipsoidalOccluder.prototype.computeHorizonCullingPoint=function(i,e,t){return computeHorizonCullingPointFromPositions(this._ellipsoid,i,e,t)};var scratchEllipsoidShrunk=Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);EllipsoidalOccluder.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid=function(i,e,t,o){return computeHorizonCullingPointFromPositions(getPossiblyShrunkEllipsoid(this._ellipsoid,t,scratchEllipsoidShrunk),i,e,o)},EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices=function(i,e,t,o,a){return computeHorizonCullingPointFromVertices(this._ellipsoid,i,e,t,o,a)},EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid=function(i,e,t,o,a,n){return computeHorizonCullingPointFromVertices(getPossiblyShrunkEllipsoid(this._ellipsoid,a,scratchEllipsoidShrunk),i,e,t,o,n)};var subsampleScratch=[];EllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle=function(i,e,t){Check.typeOf.object("rectangle",i);var o=Rectangle.subsample(i,e,0,subsampleScratch),a=BoundingSphere.fromPoints(o);if(!(Cartesian3.magnitude(a.center)<.1*e.minimumRadius))return this.computeHorizonCullingPoint(a.center,o,t)};var scratchEllipsoidShrunkRadii=new Cartesian3;function getPossiblyShrunkEllipsoid(i,e,t){if(defined(e)&&e<0&&i.minimumRadius>-e){var o=Cartesian3.fromElements(i.radii.x+e,i.radii.y+e,i.radii.z+e,scratchEllipsoidShrunkRadii);i=Ellipsoid.fromCartesian3(o,t)}return i}function computeHorizonCullingPointFromPositions(i,e,t,o){Check.typeOf.object("directionToPoint",e),Check.defined("positions",t),defined(o)||(o=new Cartesian3);for(var a=computeScaledSpaceDirectionToPoint(i,e),n=0,r=0,c=t.length;r<c;++r){var s=computeMagnitude(i,t[r],a);if(s<0)return;n=Math.max(n,s)}return magnitudeToPoint(a,n,o)}var positionScratch=new Cartesian3;function computeHorizonCullingPointFromVertices(i,e,t,o,a,n){Check.typeOf.object("directionToPoint",e),Check.defined("vertices",t),Check.typeOf.number("stride",o),defined(n)||(n=new Cartesian3),o=defaultValue(o,3),a=defaultValue(a,Cartesian3.ZERO);for(var r=computeScaledSpaceDirectionToPoint(i,e),c=0,s=0,l=t.length;s<l;s+=o){positionScratch.x=t[s]+a.x,positionScratch.y=t[s+1]+a.y,positionScratch.z=t[s+2]+a.z;var d=computeMagnitude(i,positionScratch,r);if(d<0)return;c=Math.max(c,d)}return magnitudeToPoint(r,c,n)}function isScaledSpacePointVisible(i,e,t){var o=e,a=t,n=Cartesian3.subtract(i,o,scratchCartesian),r=-Cartesian3.dot(n,o);return!(a<0?r>0:r>a&&r*r/Cartesian3.magnitudeSquared(n)>a)}var scaledSpaceScratch=new Cartesian3,directionScratch=new Cartesian3;function computeMagnitude(i,e,t){var o=i.transformPositionToScaledSpace(e,scaledSpaceScratch),a=Cartesian3.magnitudeSquared(o),n=Math.sqrt(a),r=Cartesian3.divideByScalar(o,n,directionScratch);a=Math.max(1,a);var c=1/(n=Math.max(1,n));return 1/(Cartesian3.dot(r,t)*c-Cartesian3.magnitude(Cartesian3.cross(r,t,r))*(Math.sqrt(a-1)*c))}function magnitudeToPoint(i,e,t){if(!(e<=0||e===1/0||e!=e))return Cartesian3.multiplyByScalar(i,e,t)}var directionToPointScratch=new Cartesian3;function computeScaledSpaceDirectionToPoint(i,e){return Cartesian3.equals(e,Cartesian3.ZERO)?e:(i.transformPositionToScaledSpace(e,directionToPointScratch),Cartesian3.normalize(directionToPointScratch,directionToPointScratch))}export default EllipsoidalOccluder;