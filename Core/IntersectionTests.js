import Cartesian3 from"./Cartesian3.js";import Cartographic from"./Cartographic.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import Interval from"./Interval.js";import CesiumMath from"./Math.js";import Matrix3 from"./Matrix3.js";import QuadraticRealPolynomial from"./QuadraticRealPolynomial.js";import QuarticRealPolynomial from"./QuarticRealPolynomial.js";import Ray from"./Ray.js";var IntersectionTests={rayPlane:function(e,r,t){if(!defined(e))throw new DeveloperError("ray is required.");if(!defined(r))throw new DeveloperError("plane is required.");defined(t)||(t=new Cartesian3);var a=e.origin,i=e.direction,n=r.normal,s=Cartesian3.dot(n,i);if(!(Math.abs(s)<CesiumMath.EPSILON15)){var o=(-r.distance-Cartesian3.dot(n,a))/s;if(!(o<0))return t=Cartesian3.multiplyByScalar(i,o,t),Cartesian3.add(a,t,t)}}},scratchEdge0=new Cartesian3,scratchEdge1=new Cartesian3,scratchPVec=new Cartesian3,scratchTVec=new Cartesian3,scratchQVec=new Cartesian3;IntersectionTests.rayTriangleParametric=function(e,r,t,a,i){if(!defined(e))throw new DeveloperError("ray is required.");if(!defined(r))throw new DeveloperError("p0 is required.");if(!defined(t))throw new DeveloperError("p1 is required.");if(!defined(a))throw new DeveloperError("p2 is required.");i=defaultValue(i,!1);var n,s,o,c,d,l=e.origin,h=e.direction,u=Cartesian3.subtract(t,r,scratchEdge0),f=Cartesian3.subtract(a,r,scratchEdge1),C=Cartesian3.cross(h,f,scratchPVec),m=Cartesian3.dot(u,C);if(i){if(m<CesiumMath.EPSILON6)return;if(n=Cartesian3.subtract(l,r,scratchTVec),(o=Cartesian3.dot(n,C))<0||o>m)return;if(s=Cartesian3.cross(n,u,scratchQVec),(c=Cartesian3.dot(h,s))<0||o+c>m)return;d=Cartesian3.dot(f,s)/m}else{if(Math.abs(m)<CesiumMath.EPSILON6)return;var p=1/m;if(n=Cartesian3.subtract(l,r,scratchTVec),(o=Cartesian3.dot(n,C)*p)<0||o>1)return;if(s=Cartesian3.cross(n,u,scratchQVec),(c=Cartesian3.dot(h,s)*p)<0||o+c>1)return;d=Cartesian3.dot(f,s)*p}return d},IntersectionTests.rayTriangle=function(e,r,t,a,i,n){var s=IntersectionTests.rayTriangleParametric(e,r,t,a,i);if(defined(s)&&!(s<0))return defined(n)||(n=new Cartesian3),Cartesian3.multiplyByScalar(e.direction,s,n),Cartesian3.add(e.origin,n,n)};var scratchLineSegmentTriangleRay=new Ray;function solveQuadratic(e,r,t,a){var i=r*r-4*e*t;if(!(i<0)){if(i>0){var n=1/(2*e),s=Math.sqrt(i),o=(-r+s)*n,c=(-r-s)*n;return o<c?(a.root0=o,a.root1=c):(a.root0=c,a.root1=o),a}var d=-r/(2*e);if(0!==d)return a.root0=a.root1=d,a}}IntersectionTests.lineSegmentTriangle=function(e,r,t,a,i,n,s){if(!defined(e))throw new DeveloperError("v0 is required.");if(!defined(r))throw new DeveloperError("v1 is required.");if(!defined(t))throw new DeveloperError("p0 is required.");if(!defined(a))throw new DeveloperError("p1 is required.");if(!defined(i))throw new DeveloperError("p2 is required.");var o=scratchLineSegmentTriangleRay;Cartesian3.clone(e,o.origin),Cartesian3.subtract(r,e,o.direction),Cartesian3.normalize(o.direction,o.direction);var c=IntersectionTests.rayTriangleParametric(o,t,a,i,n);if(!(!defined(c)||c<0||c>Cartesian3.distance(e,r)))return defined(s)||(s=new Cartesian3),Cartesian3.multiplyByScalar(o.direction,c,s),Cartesian3.add(o.origin,s,s)};var raySphereRoots={root0:0,root1:0};function raySphere(e,r,t){defined(t)||(t=new Interval);var a=e.origin,i=e.direction,n=r.center,s=r.radius*r.radius,o=Cartesian3.subtract(a,n,scratchPVec),c=solveQuadratic(Cartesian3.dot(i,i),2*Cartesian3.dot(i,o),Cartesian3.magnitudeSquared(o)-s,raySphereRoots);if(defined(c))return t.start=c.root0,t.stop=c.root1,t}IntersectionTests.raySphere=function(e,r,t){if(!defined(e))throw new DeveloperError("ray is required.");if(!defined(r))throw new DeveloperError("sphere is required.");if(t=raySphere(e,r,t),defined(t)&&!(t.stop<0))return t.start=Math.max(t.start,0),t};var scratchLineSegmentRay=new Ray;IntersectionTests.lineSegmentSphere=function(e,r,t,a){if(!defined(e))throw new DeveloperError("p0 is required.");if(!defined(r))throw new DeveloperError("p1 is required.");if(!defined(t))throw new DeveloperError("sphere is required.");var i=scratchLineSegmentRay;Cartesian3.clone(e,i.origin);var n=Cartesian3.subtract(r,e,i.direction),s=Cartesian3.magnitude(n);if(Cartesian3.normalize(n,n),a=raySphere(i,t,a),!(!defined(a)||a.stop<0||a.start>s))return a.start=Math.max(a.start,0),a.stop=Math.min(a.stop,s),a};var scratchQ=new Cartesian3,scratchW=new Cartesian3;function addWithCancellationCheck(e,r,t){var a=e+r;return CesiumMath.sign(e)!==CesiumMath.sign(r)&&Math.abs(a/Math.max(Math.abs(e),Math.abs(r)))<t?0:a}function quadraticVectorExpression(e,r,t,a,i){var n,s=a*a,o=i*i,c=(e[Matrix3.COLUMN1ROW1]-e[Matrix3.COLUMN2ROW2])*o,d=i*(a*addWithCancellationCheck(e[Matrix3.COLUMN1ROW0],e[Matrix3.COLUMN0ROW1],CesiumMath.EPSILON15)+r.y),l=e[Matrix3.COLUMN0ROW0]*s+e[Matrix3.COLUMN2ROW2]*o+a*r.x+t,h=o*addWithCancellationCheck(e[Matrix3.COLUMN2ROW1],e[Matrix3.COLUMN1ROW2],CesiumMath.EPSILON15),u=i*(a*addWithCancellationCheck(e[Matrix3.COLUMN2ROW0],e[Matrix3.COLUMN0ROW2])+r.z),f=[];if(0===u&&0===h){if(0===(n=QuadraticRealPolynomial.computeRealRoots(c,d,l)).length)return f;var C=n[0],m=Math.sqrt(Math.max(1-C*C,0));if(f.push(new Cartesian3(a,i*C,i*-m)),f.push(new Cartesian3(a,i*C,i*m)),2===n.length){var p=n[1],w=Math.sqrt(Math.max(1-p*p,0));f.push(new Cartesian3(a,i*p,i*-w)),f.push(new Cartesian3(a,i*p,i*w))}return f}var S=u*u,v=h*h,M=u*h,g=c*c+v,x=2*(d*c+M),y=2*l*c+d*d-v+S,E=2*(l*d-M),I=l*l-S;if(0===g&&0===x&&0===y&&0===E)return f;var P=(n=QuarticRealPolynomial.computeRealRoots(g,x,y,E,I)).length;if(0===P)return f;for(var q=0;q<P;++q){var T=n[q],O=T*T,R=Math.max(1-O,0),D=Math.sqrt(R),L=(CesiumMath.sign(c)===CesiumMath.sign(l)?addWithCancellationCheck(c*O+l,d*T,CesiumMath.EPSILON12):CesiumMath.sign(l)===CesiumMath.sign(d*T)?addWithCancellationCheck(c*O,d*T+l,CesiumMath.EPSILON12):addWithCancellationCheck(c*O+d*T,l,CesiumMath.EPSILON12))*addWithCancellationCheck(h*T,u,CesiumMath.EPSILON15);L<0?f.push(new Cartesian3(a,i*T,i*D)):L>0?f.push(new Cartesian3(a,i*T,i*-D)):0!==D?(f.push(new Cartesian3(a,i*T,i*-D)),f.push(new Cartesian3(a,i*T,i*D)),++q):f.push(new Cartesian3(a,i*T,i*D))}return f}IntersectionTests.rayEllipsoid=function(e,r){if(!defined(e))throw new DeveloperError("ray is required.");if(!defined(r))throw new DeveloperError("ellipsoid is required.");var t,a,i,n,s,o=r.oneOverRadii,c=Cartesian3.multiplyComponents(o,e.origin,scratchQ),d=Cartesian3.multiplyComponents(o,e.direction,scratchW),l=Cartesian3.magnitudeSquared(c),h=Cartesian3.dot(c,d);if(l>1){if(h>=0)return;var u=h*h;if(t=l-1,u<(i=(a=Cartesian3.magnitudeSquared(d))*t))return;if(u>i){n=h*h-i;var f=(s=-h+Math.sqrt(n))/a,C=t/s;return f<C?new Interval(f,C):{start:C,stop:f}}var m=Math.sqrt(t/a);return new Interval(m,m)}return l<1?(t=l-1,n=h*h-(i=(a=Cartesian3.magnitudeSquared(d))*t),s=-h+Math.sqrt(n),new Interval(0,s/a)):h<0?(a=Cartesian3.magnitudeSquared(d),new Interval(0,-h/a)):void 0};var firstAxisScratch=new Cartesian3,secondAxisScratch=new Cartesian3,thirdAxisScratch=new Cartesian3,referenceScratch=new Cartesian3,bCart=new Cartesian3,bScratch=new Matrix3,btScratch=new Matrix3,diScratch=new Matrix3,dScratch=new Matrix3,cScratch=new Matrix3,tempMatrix=new Matrix3,aScratch=new Matrix3,sScratch=new Cartesian3,closestScratch=new Cartesian3,surfPointScratch=new Cartographic;IntersectionTests.grazingAltitudeLocation=function(e,r){if(!defined(e))throw new DeveloperError("ray is required.");if(!defined(r))throw new DeveloperError("ellipsoid is required.");var t=e.origin,a=e.direction;if(!Cartesian3.equals(t,Cartesian3.ZERO)){var i=r.geodeticSurfaceNormal(t,firstAxisScratch);if(Cartesian3.dot(a,i)>=0)return t}var n=defined(this.rayEllipsoid(e,r)),s=r.transformPositionToScaledSpace(a,firstAxisScratch),o=Cartesian3.normalize(s,s),c=Cartesian3.mostOrthogonalAxis(s,referenceScratch),d=Cartesian3.normalize(Cartesian3.cross(c,o,secondAxisScratch),secondAxisScratch),l=Cartesian3.normalize(Cartesian3.cross(o,d,thirdAxisScratch),thirdAxisScratch),h=bScratch;h[0]=o.x,h[1]=o.y,h[2]=o.z,h[3]=d.x,h[4]=d.y,h[5]=d.z,h[6]=l.x,h[7]=l.y,h[8]=l.z;var u=Matrix3.transpose(h,btScratch),f=Matrix3.fromScale(r.radii,diScratch),C=Matrix3.fromScale(r.oneOverRadii,dScratch),m=cScratch;m[0]=0,m[1]=-a.z,m[2]=a.y,m[3]=a.z,m[4]=0,m[5]=-a.x,m[6]=-a.y,m[7]=a.x,m[8]=0;var p,w,S=Matrix3.multiply(Matrix3.multiply(u,C,tempMatrix),m,tempMatrix),v=Matrix3.multiply(Matrix3.multiply(S,f,aScratch),h,aScratch),M=Matrix3.multiplyByVector(S,t,bCart),g=quadraticVectorExpression(v,Cartesian3.negate(M,firstAxisScratch),0,0,1),x=g.length;if(x>0){for(var y=Cartesian3.clone(Cartesian3.ZERO,closestScratch),E=Number.NEGATIVE_INFINITY,I=0;I<x;++I){p=Matrix3.multiplyByVector(f,Matrix3.multiplyByVector(h,g[I],sScratch),sScratch);var P=Cartesian3.normalize(Cartesian3.subtract(p,t,referenceScratch),referenceScratch),q=Cartesian3.dot(P,a);q>E&&(E=q,y=Cartesian3.clone(p,y))}var T=r.cartesianToCartographic(y,surfPointScratch);return E=CesiumMath.clamp(E,0,1),w=Cartesian3.magnitude(Cartesian3.subtract(y,t,referenceScratch))*Math.sqrt(1-E*E),w=n?-w:w,T.height=w,r.cartographicToCartesian(T,new Cartesian3)}};var lineSegmentPlaneDifference=new Cartesian3;IntersectionTests.lineSegmentPlane=function(e,r,t,a){if(!defined(e))throw new DeveloperError("endPoint0 is required.");if(!defined(r))throw new DeveloperError("endPoint1 is required.");if(!defined(t))throw new DeveloperError("plane is required.");defined(a)||(a=new Cartesian3);var i=Cartesian3.subtract(r,e,lineSegmentPlaneDifference),n=t.normal,s=Cartesian3.dot(n,i);if(!(Math.abs(s)<CesiumMath.EPSILON6)){var o=Cartesian3.dot(n,e),c=-(t.distance+o)/s;if(!(c<0||c>1))return Cartesian3.multiplyByScalar(i,c,a),Cartesian3.add(e,a,a),a}},IntersectionTests.trianglePlaneIntersection=function(e,r,t,a){if(!(defined(e)&&defined(r)&&defined(t)&&defined(a)))throw new DeveloperError("p0, p1, p2, and plane are required.");var i,n,s=a.normal,o=a.distance,c=Cartesian3.dot(s,e)+o<0,d=Cartesian3.dot(s,r)+o<0,l=Cartesian3.dot(s,t)+o<0,h=0;if(h+=c?1:0,h+=d?1:0,1!==(h+=l?1:0)&&2!==h||(i=new Cartesian3,n=new Cartesian3),1===h){if(c)return IntersectionTests.lineSegmentPlane(e,r,a,i),IntersectionTests.lineSegmentPlane(e,t,a,n),{positions:[e,r,t,i,n],indices:[0,3,4,1,2,4,1,4,3]};if(d)return IntersectionTests.lineSegmentPlane(r,t,a,i),IntersectionTests.lineSegmentPlane(r,e,a,n),{positions:[e,r,t,i,n],indices:[1,3,4,2,0,4,2,4,3]};if(l)return IntersectionTests.lineSegmentPlane(t,e,a,i),IntersectionTests.lineSegmentPlane(t,r,a,n),{positions:[e,r,t,i,n],indices:[2,3,4,0,1,4,0,4,3]}}else if(2===h){if(!c)return IntersectionTests.lineSegmentPlane(r,e,a,i),IntersectionTests.lineSegmentPlane(t,e,a,n),{positions:[e,r,t,i,n],indices:[1,2,4,1,4,3,0,3,4]};if(!d)return IntersectionTests.lineSegmentPlane(t,r,a,i),IntersectionTests.lineSegmentPlane(e,r,a,n),{positions:[e,r,t,i,n],indices:[2,0,4,2,4,3,1,3,4]};if(!l)return IntersectionTests.lineSegmentPlane(e,t,a,i),IntersectionTests.lineSegmentPlane(r,t,a,n),{positions:[e,r,t,i,n],indices:[0,1,4,0,4,3,2,3,4]}}};export default IntersectionTests;