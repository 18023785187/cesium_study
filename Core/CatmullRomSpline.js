import Cartesian3 from"./Cartesian3.js";import Cartesian4 from"./Cartesian4.js";import Check from"./Check.js";import defaultValue from"./defaultValue.js";import defined from"./defined.js";import HermiteSpline from"./HermiteSpline.js";import Matrix4 from"./Matrix4.js";import Spline from"./Spline.js";var scratchTimeVec=new Cartesian4,scratchTemp0=new Cartesian3,scratchTemp1=new Cartesian3;function createEvaluateFunction(t){var e=t.points,a=t.times;if(e.length<3){var i=a[0],n=1/(a[1]-i),r=e[0],l=e[1];return function(t,e){defined(e)||(e=new Cartesian3);var a=(t-i)*n;return Cartesian3.lerp(r,l,a,e)}}return function(i,n){defined(n)||(n=new Cartesian3);var r,l,s,m,c,p=t._lastTimeIndex=t.findTimeInterval(i,t._lastTimeIndex),o=(i-a[p])/(a[p+1]-a[p]),u=scratchTimeVec;return u.z=o,u.y=o*o,u.x=u.y*o,u.w=1,0===p?(r=e[0],l=e[1],s=t.firstTangent,m=Cartesian3.subtract(e[2],r,scratchTemp0),Cartesian3.multiplyByScalar(m,.5,m),c=Matrix4.multiplyByVector(HermiteSpline.hermiteCoefficientMatrix,u,u)):p===e.length-2?(r=e[p],l=e[p+1],m=t.lastTangent,s=Cartesian3.subtract(l,e[p-1],scratchTemp0),Cartesian3.multiplyByScalar(s,.5,s),c=Matrix4.multiplyByVector(HermiteSpline.hermiteCoefficientMatrix,u,u)):(r=e[p-1],l=e[p],s=e[p+1],m=e[p+2],c=Matrix4.multiplyByVector(CatmullRomSpline.catmullRomCoefficientMatrix,u,u)),n=Cartesian3.multiplyByScalar(r,c.x,n),Cartesian3.multiplyByScalar(l,c.y,scratchTemp1),Cartesian3.add(n,scratchTemp1,n),Cartesian3.multiplyByScalar(s,c.z,scratchTemp1),Cartesian3.add(n,scratchTemp1,n),Cartesian3.multiplyByScalar(m,c.w,scratchTemp1),Cartesian3.add(n,scratchTemp1,n)}}var firstTangentScratch=new Cartesian3,lastTangentScratch=new Cartesian3;function CatmullRomSpline(t){var e=(t=defaultValue(t,defaultValue.EMPTY_OBJECT)).points,a=t.times,i=t.firstTangent,n=t.lastTangent;if(Check.defined("points",e),Check.defined("times",a),Check.typeOf.number.greaterThanOrEquals("points.length",e.length,2),Check.typeOf.number.equals("times.length","points.length",a.length,e.length),e.length>2&&(defined(i)||(i=firstTangentScratch,Cartesian3.multiplyByScalar(e[1],2,i),Cartesian3.subtract(i,e[2],i),Cartesian3.subtract(i,e[0],i),Cartesian3.multiplyByScalar(i,.5,i)),!defined(n))){var r=e.length-1;n=lastTangentScratch,Cartesian3.multiplyByScalar(e[r-1],2,n),Cartesian3.subtract(e[r],n,n),Cartesian3.add(n,e[r-2],n),Cartesian3.multiplyByScalar(n,.5,n)}this._times=a,this._points=e,this._firstTangent=Cartesian3.clone(i),this._lastTangent=Cartesian3.clone(n),this._evaluateFunction=createEvaluateFunction(this),this._lastTimeIndex=0}Object.defineProperties(CatmullRomSpline.prototype,{times:{get:function(){return this._times}},points:{get:function(){return this._points}},firstTangent:{get:function(){return this._firstTangent}},lastTangent:{get:function(){return this._lastTangent}}}),CatmullRomSpline.catmullRomCoefficientMatrix=new Matrix4(-.5,1,-.5,0,1.5,-2.5,0,1,-1.5,2,.5,0,.5,-.5,0,0),CatmullRomSpline.prototype.findTimeInterval=Spline.prototype.findTimeInterval,CatmullRomSpline.prototype.wrapTime=Spline.prototype.wrapTime,CatmullRomSpline.prototype.clampTime=Spline.prototype.clampTime,CatmullRomSpline.prototype.evaluate=function(t,e){return this._evaluateFunction(t,e)};export default CatmullRomSpline;