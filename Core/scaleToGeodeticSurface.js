import Cartesian3 from"./Cartesian3.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import CesiumMath from"./Math.js";var scaleToGeodeticSurfaceIntersection=new Cartesian3,scaleToGeodeticSurfaceGradient=new Cartesian3;function scaleToGeodeticSurface(e,r,i,a,o){if(!defined(e))throw new DeveloperError("cartesian is required.");if(!defined(r))throw new DeveloperError("oneOverRadii is required.");if(!defined(i))throw new DeveloperError("oneOverRadiiSquared is required.");if(!defined(a))throw new DeveloperError("centerToleranceSquared is required.");var t=e.x,n=e.y,d=e.z,s=r.x,c=r.y,f=r.z,u=t*t*s*s,l=n*n*c*c,m=d*d*f*f,v=u+l+m,p=Math.sqrt(1/v),w=Cartesian3.multiplyByScalar(e,p,scaleToGeodeticSurfaceIntersection);if(v<a)return isFinite(p)?Cartesian3.clone(w,o):void 0;var C=i.x,h=i.y,S=i.z,y=scaleToGeodeticSurfaceGradient;y.x=w.x*C*2,y.y=w.y*h*2,y.z=w.z*S*2;var G,q,x,E,T,z,D,M=(1-p)*Cartesian3.magnitude(e)/(.5*Cartesian3.magnitude(y)),j=0;do{j=(G=u*(T=(q=1/(1+(M-=j)*C))*q)+l*(z=(x=1/(1+M*h))*x)+m*(D=(E=1/(1+M*S))*E)-1)/(-2*(u*(T*q)*C+l*(z*x)*h+m*(D*E)*S))}while(Math.abs(G)>CesiumMath.EPSILON12);return defined(o)?(o.x=t*q,o.y=n*x,o.z=d*E,o):new Cartesian3(t*q,n*x,d*E)}export default scaleToGeodeticSurface;